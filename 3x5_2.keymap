/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

// Keymaps
#include "../keys/hebrew.h"
#include "../keys/shortcut.h"
#include "../keys/mod.h"

&mt {
    tapping_term_ms = <200>;
    flavor = "tap-preferred";
};
&sk {
    release-after-ms = <2000>;
    quick-release;
};

// Behaviors Constants
#define long_tap 200
#define short_tap 150

// Combos Constants
#define default_timeout 50

// Layers
#define ENG    0
#define HEB    1
#define SYM    2
#define KBNV   3
#define MSNV   4	
#define BLTH   5

/ {
    combos {
        compatible = "zmk,combos";

/* 34 Key Matrix
* ╭──────────────╮ ╭──────────────╮
* │ 0  1  2  3  4│ │ 5  6  7  8  9│
* │10 11 12 13 14│ │15 16 17 18 19│
* │20 21 22 23 24│ │25 26 27 28 29│
* ╰────────╮30 31│ │32 33╭────────╯
*          ╰─────╯ ╰─────╯         
*/

// General combos
        combo_to_base {
            timeout-ms = <default_timeout>;
            key-positions = <30 33>;
            bindings = <&to ENG>;
        };
        combo_to_bt {
            timeout-ms = <default_timeout>;
            key-positions = <0 9>;
            bindings = <&to BLTH>;
            layers = <ENG HEB SYM KBNV MSNV>;
        };

// Alphanumeric-Layer combos
        combo_caps_word {
            timeout-ms = <default_timeout>;
            key-positions = <24 25>;
            bindings = <&caps_word>;
            layers = <ENG HEB SYM>;
        };

// Top Row (left to right)
        combo_escape {
            timeout-ms = <default_timeout>;
            key-positions = <0 1>;
            bindings = <&kp ESCAPE>;
            layers = <ENG HEB SYM>;
        };

        combo_dollar {
            timeout-ms = <default_timeout>;
            key-positions = <2 3>; 
            bindings = <&kp DOLLAR>;
            layers = <ENG SYM>;
        };
        combo_shekel {
            timeout-ms = <default_timeout>;
            key-positions = <2 3>;
            bindings = <&kp H_SHKL>;
            layers = <HEB>;
        };

        combo_underscore {
            timeout-ms = <default_timeout>;
            key-positions = <6 7>;
            bindings = <&kp UNDERSCORE>;
            layers = <ENG HEB SYM>;
        };

        combo_backspace {
            timeout-ms = <default_timeout>;
            key-positions = <8 9>;
            bindings = <&kp BACKSPACE>;
            layers = <ENG HEB SYM>;
        };

// Middle row
        combo_tab {
            timeout-ms = <default_timeout>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
            layers = <ENG HEB SYM>;
        };

        combo_return {
            timeout-ms = <default_timeout>;
            key-positions = <18 19>;
            bindings = <&kp RETURN>;
            layers = <ENG HEB SYM>;
        };

// Bottom row
        combo_slash {
            timeout-ms = <default_timeout>;
            key-positions = <20 21>;
            bindings = <&kp FSLH>;
            layers = <ENG HEB SYM>;
        };

        combo_asterisk {
            timeout-ms = <default_timeout>;
            key-positions = <22 23>;
            bindings = <&kp ASTERISK>;
            layers = <ENG HEB SYM>;
        };

        combo_hash {
            timeout-ms = <default_timeout>;
            key-positions = <26 27>;
            bindings = <&kp HASH>;
            layers = <ENG HEB SYM>;
        };

        combo_at_sign {
            timeout-ms = <default_timeout>;
            key-positions = <28 29>;
            bindings = <&kp AT_SIGN>;
            layers = <ENG HEB SYM>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <long_tap>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = 
                <&kp>, 
                <&kp>;
        };
        smt: sticky_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_MOD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <long_tap>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = 
                <&sk>, 
                <&kp>;
        };
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <short_tap>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = 
                <&kp>, 
                <&kp>;
        };
        // 1: Period "."; 2: Colon ":"; 3: Ellipsis "..."
        td_dc: tap_dot_colon {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DOT_COLON";
            #binding-cells = <0>;
            tapping-term-ms = <short_tap>;
            bindings = 
                <&kp DOT>, 
                <&kp COLON>, 
                <&kp DOT &kp DOT &kp DOT>;
        };
        // 1: Comma ","; 2: Semicolon ";"
        td_cs: tap_comma_semicolon {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_COMMA_SEMICOLON";
            #binding-cells = <0>;
            tapping-term-ms = <short_tap>;
            bindings = 
                <&kp COMMA>, 
                <&kp SEMICOLON>;
        };
        // 1: Single quote "'"; 2: Double quote """; 3: Triple-double quote """""
        td_qt: tap_quote {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_QUOTE";
            #binding-cells = <0>;
            tapping-term-ms = <short_tap>;
            bindings = 
                <&kp SINGLE_QUOTE>, 
                <&kp DOUBLE_QUOTES>, 
                <&kp DOUBLE_QUOTES &kp DOUBLE_QUOTES &kp DOUBLE_QUOTES>;
        };
        // 1: Question mark "?"; 2: Exclamation mark "!"
        td_qe: tap_ques_excl {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_QUES_EXCL";
            #binding-cells = <0>;
            tapping-term-ms = <short_tap>;
            bindings = 
                <&kp QUESTION>, 
                <&kp EXCLAMATION>,
                <&kp QUESTION &kp QUESTION &kp QUESTION>;
        };
        // 1: Period "."; 2: Colon ":"; 3: Ellipsis "..."
        td_hdc: tap_heb_dot_colon {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_HEB_DOT_COLON";
            #binding-cells = <0>;
            tapping-term-ms = <short_tap>;
            bindings = 
                <&kp H_DOT>, 
                <&kp H_COLON>, 
                <&kp H_DOT &kp H_DOT &kp H_DOT>;
        };
        // 1: Comma ","; 2: Semicolon ";"
        td_hcs: tap_heb_comma_semicolon {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_HEB_COMMA_SEMICOLON";
            #binding-cells = <0>;
            tapping-term-ms = <short_tap>;
            bindings = 
                <&kp H_COMMA>, 
                <&kp H_SEMI>;
        };
        // 1: Single quote "'"; 2: Double quote """; 3: Triple-double quote """""
        td_hqt: tap_heb_quote {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_HEB_QUOTE";
            #binding-cells = <0>;
            tapping-term-ms = <short_tap>;
            bindings = 
                <&kp H_SQT>, 
                <&kp H_DQT>, 
                <&kp H_DQT &kp H_DQT &kp H_DQT>;
        };
        // 1: Question mark "?"; 2: Exclamation mark "!"
        td_hqe: tap_heb_ques_excl {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_HEB_QUES_EXCL";
            #binding-cells = <0>;
            tapping-term-ms = <short_tap>;
            bindings = 
                <&kp H_QMARK>, 
                <&kp H_EXCL>;
        };
        // 1: Question mark "?"; 2: Exclamation mark "!"
        td_htsdi: tap_heb_tsadi {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_HEB_TSADI";
            #binding-cells = <0>;
            tapping-term-ms = <short_tap>;
            bindings = 
                <&kp H_TSDI>, 
                <&kp H_FTSDI>;
        };
        // Number-Function Mod-Morph
        fn_n1: number_function_1 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMBER_FUNCTION_1";
            #binding-cells = <0>;
            bindings = 
                <&kp KP_N1>, 
                <&kp F1>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        fn_n2: number_function_2 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMBER_FUNCTION_2";
            #binding-cells = <0>;
            bindings = 
                <&kp KP_N2>, 
                <&kp F2>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        fn_n3: number_function_3 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMBER_FUNCTION_3";
            #binding-cells = <0>;
            bindings = 
                <&kp KP_N3>, 
                <&kp F3>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        fn_n4: number_function_4 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMBER_FUNCTION_4";
            #binding-cells = <0>;
            bindings = 
                <&kp KP_N4>, 
                <&kp F4>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        fn_n5: number_function_5 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMBER_FUNCTION_5";
            #binding-cells = <0>;
            bindings = 
                <&kp KP_N5>, 
                <&kp F5>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        fn_n6: number_function_6 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMBER_FUNCTION_6";
            #binding-cells = <0>;
            bindings = 
                <&kp KP_N6>,
                <&kp F6>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        fn_n7: number_function_7 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMBER_FUNCTION_7";
            #binding-cells = <0>;
            bindings = 
                <&kp KP_N7>,
                <&kp F7>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        fn_n8: number_function_8 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMBER_FUNCTION_8";
            #binding-cells = <0>;
            bindings = 
                <&kp KP_N8>,
                <&kp F8>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        fn_n9: number_function_9 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMBER_FUNCTION_9";
            #binding-cells = <0>;
            bindings = 
                <&kp KP_N9>, 
                <&kp F9>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        fn_n0: number_function_10 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMBER_FUNCTION_10";
            #binding-cells = <0>;
            bindings = 
                <&kp KP_N0>,
                <&kp F10>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };


    keymap {
        compatible = "zmk,keymap";

        base_eng {
            label = "English";
            bindings = <
    &kp Q           &kp W           &kp F           &kp P           &kp B              &kp J           &kp L           &kp U           &kp Y           &td_qe
    &kp A           &kp R           &hm LALT S      &hm LGUI T      &kp G              &kp M           &hm RGUI N      &hm RALT E      &kp I           &kp O
    &kp Z           &kp X           &kp C           &kp D           &kp V              &kp K           &kp H           &td_cs          &td_dc          &td_qt
                                    &smt MEH SPACE          &mt CAPS LSHIFT            &sk RCTRL               &to 2
            >;
        };
        base_heb {
            label = "Hebrew";
            bindings = <
    &kp H_QOF       &kp H_RESH      &kp H_ALEF      &kp H_TET       &kp H_VAV          &kp H_FNUN      &kp H_FMEM      &kp H_PE        &td_htsdi       &td_hqe
    &kp H_SHIN      &kp H_DALT      &hm LALT H_GIML &hm LGUI H_KAF  &kp H_AYIN         &kp H_YOD       &hm RGUI H_HET  &hm RALT H_LAMD &kp H_FKAF      &kp H_FPE
    &kp H_ZAYN      &kp H_SMKH      &kp H_BET       &kp H_HE        &kp H_NUN          &kp H_MEM       &kp H_TAV       &td_hcs         &td_hdc         &td_hqt
                                    &smt MEH SPACE          &mt CAPS LSHIFT            &sk RCTRL               &to 2
            >;
        };
        symbol {
            label = "Symbols";
            bindings = <
    &fn_n1          &fn_n2          &fn_n3            &fn_n4            &fn_n5        &fn_n6          &fn_n7        &fn_n8          &fn_n9      &fn_n0
    &kp EQUAL       &kp CARET       &hm LALT KP_MINUS &hm LGUI KP_PLUS  &kp PRCNT     &kp AMPERSAND   &hm RGUI LPAR &hm RALT RPAR   &kp LBKT    &kp RBKT
    &kp BACKSLASH   &kp PIPE        &kp GRAVE         &kp TILDE         &to 0         &to 1           &kp LBRC      &kp RBRC        &kp LT      &kp GT
                                    &smt MEH SPACE          &kp LSHIFT                &sk RCTRL               &to 3
            >;
        };
        nav_kb {
            label = "Keyboard Navigation";
            bindings = <
    &kp ESC           &kp KB_REDO &kp KB_UNDO   &kp CSCRN &kp PSCRN       &kp RC(R) &kp RC(TAB) &kp RA(RIGHT) &kp RC(T) &kp BSPC
    &mt SWCH_APP TAB  &kp KB_COPY &kp KB_PASTE  &mkp LCLK &mkp RCLK       &kp LEFT  &kp DOWN    &kp UP        &kp RIGHT &kp RET
    &kp LALT          &kp LC(Y)   &kp LC(Z)     &kp LC(C) &kp LC(V)       &kp HOME  &kp PG_DN   &kp PG_UP     &kp END   &to 0
                                  &smt MEH LGUI           &sk LSHIFT      &sk RCTRL             &to 2
            >;
        };
        nav_ms {
            label = "Mouse Navigation";
            bindings = <
    &kp ESC           &kp KB_REDO &kp KB_UNDO   &kp CSCRN &kp PSCRN       &kp RC(R)         &kp RC(TAB)       &kp RA(RIGHT)   &kp RC(T)         &kp BSPC
    &mt SWCH_APP TAB  &kp KB_COPY &kp KB_PASTE  &mkp LCLK &mkp RCLK       &mmv MOVE_LEFT    &mmv MOVE_DOWN    &mmv MOVE_UP    &mmv MOVE_RIGHT   &kp RET
    &kp LALT          &kp LC(Y)   &kp LC(Z)     &kp LC(C) &kp LC(V)       &mwh SCROLL_LEFT  &mwh SCROLL_DOWN  &mwh SCROLL_UP  &mwh SCROLL_RIGHT &to 0
                                  &smt MEH LGUI           &sk LSHIFT      &sk RCTRL               &to 1
            >;
        };
        bluetooth {
            label = "Bluetooth";
            bindings = <
    &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4       &trans          &trans          &trans          &trans          &bt BT_PRV
    &trans          &trans          &trans          &trans          &trans             &trans          &trans          &trans          &trans          &bt BT_NXT
    &bootloader     &trans          &trans          &trans          &trans             &trans          &trans          &trans          &trans          &bt BT_CLR
                                    &to 0                   &to 1                      &to 2                   &to 3
        >;
        };
    };
};
