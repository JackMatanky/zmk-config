/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>

// Hebrew Keymap

#include "keys_hebrew.h"

// Extra Keys

#include "shortcut.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define MEH LC(LS(LALT))
#define HYP LC(LS(LA(LGUI)))

// Behavior Defaults

&mt {
    tapping_term_ms = <200>;
    flavor = "tap-preferred";
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

&caps_word { continue-list = <BACKSPACE DELETE UNDERSCORE MINUS BSPC DEL NUMBER_1 NUMBER_2 NUMBER_3 NUMBER_4 NUMBER_5 NUMBER_6 NUMBER_7 NUMBER_8 NUMBER_9 NUMBER_0 N1 N2 N3 N4 N5 N6 N7 N8 N9 N0 KP_N1 KP_N2 KP_N3 KP_N4 KP_N5 KP_N6 KP_N7 KP_N8 KP_N9 KP_N0>; };

// Behaviors Constants

#define long_tap 200
#define short_tap 150

// Combos Constants
// #define default_timeout 50
// Layers

#define ENG    0
#define HEB    1
#define NUM    2
#define KBNV   3

// #define MSNV   4

#define BLTH   4 // 5

/* Source: https://github.com/caksoylar/zmk-config

#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS, TERM, QUICKTAP) \
   combo_##NAME { \
     timeout-ms = <TERM>; \
     bindings = <BINDINGS>; \
     key-positions = <KEYPOS>; \
     layers = <LAYERS>; \
     global-quick-tap-ms = <QUICKTAP>; \
   };
*/

/ {
    combos {
        compatible = "zmk,combos";

        /*
* KEY POSITIONS - 30 Key Matrix
* ╭─────────────────────╮ ╭─────────────────────╮
* │ LT4 LT3 LT2 LT1 LT0 │ │ RT0 RT1 RT2 RT3 RT4 │
* │ LM4 LM3 LM2 LM1 LM0 │ │ RM0 RM1 RM2 RM3 RM4 │
* │     LB3 LB2 LB1     │ │     RB1 RB2 RB3     │
* ╰───────────╮ LH1 LH0 │ │ RH0 RH1 ╭───────────╯
*             ╰─────────╯ ╰─────────╯ 
* 
* ╭──────────────╮ ╭──────────────╮
* │ 0  1  2  3  4│ │ 5  6  7  8  9│
* │10 11 12 13 14│ │15 16 17 18 19│
* │   20 21 22   │ │   23 24 25   │
* ╰────────╮26 27│ │28 29╭────────╯
*          ╰─────╯ ╰─────╯         
*/
        // General combos

        combo_english_thumb {
            bindings = <&to 0>;
            key-positions = <29 26>;
            timeout-ms = <50>;
        };

        combo_hebrew {
            bindings = <&to 1>;
            key-positions = <14 15>;
            timeout-ms = <50>;
            layers = <0 2 3 5>;
        };

        combo_number {
            bindings = <&to 2>;
            key-positions = <26 27>;
            timeout-ms = <50>;
            layers = <0 1 3 5>;
        };

        combo_keyboard_nav {
            bindings = <&to 3>;
            key-positions = <28 29>;
            timeout-ms = <50>;
            layers = <0 1 2 5>;
        };

        combo_bluetooth_mid_index {
            bindings = <&to 5>;
            key-positions = <2 3 6 7>;
            timeout-ms = <50>;
            layers = <0 1 2 3>;
        };

        combo_bspc_del {
            bindings = <&mm_back_del>;
            key-positions = <5 15>;
            timeout-ms = <50>;
            layers = <0 1 2 3>;
        };

        combo_escape {
            bindings = <&kp ESCAPE>;
            key-positions = <4 14>;
            timeout-ms = <50>;
            layers = <0 1 2 3>;
        };

        combo_tab {
            bindings = <&mm_alt_tab>;
            key-positions = <0 10>;
            timeout-ms = <50>;
            layers = <0 1 2 3>;
        };

        combo_return {
            bindings = <&kp RETURN>;
            key-positions = <19 9>;
            timeout-ms = <50>;
            layers = <0 1 2 3>;
        };

        // Alphanumeric-Layer combos

        combo_caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <4 5>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        // Shortcuts

        combo_undo {
            bindings = <&kp LC(Z)>;
            key-positions = <10 20>;
            timeout-ms = <50>;
            layers = <0 1 2 3>;
        };

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <11 0>;
            timeout-ms = <50>;
            layers = <0 1 2 3>;
        };

        combo_paste {
            bindings = <&kp LC(V)>;
            key-positions = <9 18>;
            timeout-ms = <50>;
            layers = <0 1 2 3>;
        };

        combo_redo {
            bindings = <&kp LC(Y)>;
            key-positions = <19 25>;
            timeout-ms = <50>;
            layers = <0 1 2 3>;
        };

        // Top Row (Left to Right)
        // Left

        combo_less_than {
            bindings = <&kp LESS_THAN>;
            key-positions = <1 0>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_lbrace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <2 1>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_lbracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <2 3>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_lparenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <4 3>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        // Right

        combo_rparenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <6 5>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_rbracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <7 6>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_rbrace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <7 8>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_greater_than {
            bindings = <&kp GREATER_THAN>;
            key-positions = <8 9>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        // Top-Home Row (Left to Right)
        // Left

        combo_at_sign {
            bindings = <&kp AT_SIGN>;
            key-positions = <1 11>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_hash {
            bindings = <&kp HASH>;
            key-positions = <2 12>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <3 13>;
            timeout-ms = <50>;
            layers = <0 2>;
        };

        combo_shekel {
            bindings = <&kp HE_NEW_SHEQEL>;
            key-positions = <3 13>;
            timeout-ms = <50>;
            layers = <1>;
        };

        // Right

        combo_quote {
            bindings = <&td_stq>;
            key-positions = <6 16>;
            timeout-ms = <50>;
            layers = <0 2>;
        };

        combo_heb_quote {
            bindings = <&td_hstq>;
            key-positions = <6 16>;
            timeout-ms = <50>;
            layers = <1>;
        };

        combo_asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <7 17>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_fslash {
            bindings = <&kp SLASH>;
            key-positions = <18 8>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        // Home-Bottom Row (Left to Right)
        // Left

        combo_backtick {
            bindings = <&kp GRAVE>;
            key-positions = <20 11>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <21 12>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <13 22>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        // Right

        combo_period_colon {
            bindings = <&td_dc>;
            key-positions = <16 23>;
            timeout-ms = <50>;
            layers = <0 2>;
        };

        combo_heb_period_colon {
            bindings = <&td_hdc>;
            key-positions = <16 23>;
            timeout-ms = <50>;
            layers = <1>;
        };

        combo_comma_semicolon {
            bindings = <&mm_cs>;
            key-positions = <17 24>;
            timeout-ms = <50>;
            layers = <0 2>;
        };

        combo_heb_comma_semicolon {
            bindings = <&mm_hcs>;
            key-positions = <17 24>;
            timeout-ms = <50>;
            layers = <1>;
        };

        combo_question_exclamation {
            bindings = <&td_qe>;
            key-positions = <18 25>;
            timeout-ms = <50>;
            layers = <0 2>;
        };

        combo_heb_question_exclamation {
            bindings = <&td_hqe>;
            key-positions = <18 25>;
            timeout-ms = <50>;
            layers = <1>;
        };

        // Index-Inner
        // Left

        combo_tilde {
            bindings = <&kp TILDE>;
            key-positions = <14 13>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        // Right

        combo_equal {
            bindings = <&kp EQUAL>;
            key-positions = <15 16>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        // Bottom row
        // Left

        combo_caret {
            bindings = <&kp CARET>;
            key-positions = <20 21>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_percent {
            bindings = <&kp PERCENT>;
            key-positions = <21 22>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_bslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <22 14>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        // Right

        combo_pipe {
            bindings = <&kp PIPE>;
            key-positions = <15 23>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <23 24>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_hyphen {
            bindings = <&kp MINUS>;
            timeout-ms = <50>;
            key-positions = <24 25>;
            layers = <0 1 2>;
        };
    };

    behaviors {
        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 30 31>;
        };

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 32 33 23 24>;
        };

        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        sht: sticky_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&sk>, <&kp>;
        };

        scw: sticky_shift_capsword {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&caps_word>, <&sk>;
        };

        // PUNCTUATION: English
        // Mod-Morph: Period "."; Colon ":"

        mm_dc: morph_period_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp PERIOD>, <&kp COLON>;
        };

        // Tap-Dance: 1) Mod-Morph Period-Colon; 2) Ellipsis "..."

        td_dc: tap_dot_colon {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mm_dc>, <&ellipsis>;
        };

        // Mod-Morph: Comma ","; Semicolon ";"

        mm_cs: morph_comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
        };

        // Tap-Dance: 1) Comma ","; 2) Semicolon ";"

        td_cs: tap_comma_semicolon {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
        };

        // Tap-Dance: 1) Single quote "'/""; 2) Triple-double quote """""

        td_stq: tap_single_triple_quote {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp SINGLE_QUOTE>, <&tri_dquote>;
        };

        // Mod-Morph: Question "?"; Exclamation "!"

        mm_qe: morph_question_exclamation {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;
        };

        // Tap-Dance: 1) Mod-Morph Question-Exclamation; 2) Triple Question "???"

        td_qe: tap_ques_excl {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mm_qe>, <&tri_ques>;
        };

        // PUNCTUATION: Hebrew
        // Mod-Morph: Period "."; Colon ":"

        mm_hdc: morph_heb_period_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp HE_PERIOD>, <&kp HE_COLON>;
        };

        // 1) Mod-Morph Period-Colon; 2) Ellipsis "..."

        td_hdc: tap_heb_dot_colon {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mm_hdc>, <&heb_ellipsis>;
        };

        // Mod-Morph: Comma ","; Semicolon ";"

        mm_hcs: morph_heb_comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp HE_COMMA>, <&kp HE_SEMICOLON>;
        };

        // Tap-Dance: 1) Comma ","; 2) Semicolon ";"

        td_hcs: tap_heb_comma_semicolon {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp HE_COMMA>, <&kp HE_SEMICOLON>;
        };

        // Mod-Morph: Single Quote "'"; Double Quote """

        mm_hsdq: morph_heb_single_double_quote {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp HE_SINGLE_QUOTE>, <&kp HE_DOUBLE_QUOTES>;
        };

        // Tap-Dance: 1) Mod-Morph Single-Double Quote; 2) Triple-Double Quote """""

        td_hstq: tap_heb_single_triple_quote {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mm_hsdq>, <&heb_tri_dquote>;
        };

        // Mod-Morph: Question "?"; Exclamation "!"

        mm_hqe: morph_heb_question_exclamation {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp HE_QUESTION>, <&kp HE_EXCLAMATION>;
        };

        // Tap-Dance: 1) Mod-Morph Question-Exclamation; 2) Triple Question Mark "???"

        td_hqe: tap_heb_ques_excl {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mm_hqe>, <&heb_tri_ques>;
        };

        // Mod-Morph: Tsadi; Final Tsadi

        mm_htsdi: morph_heb_tsadi {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp HE_TSADI>, <&kp HE_FTSADI>;
        };

        // MOD MORPHS
        // GENERAL

        mm_back_del: morph_backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
        };

        mm_vol_dn_mute: morph_volume_down_mute {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RCTL)>;
            bindings = <&kp C_VOL_DN>, <&kp C_MUTE>;
        };

        // LAYER
        // To ENGLISH; Shifted: To Hebrew

        mm_base: morph_base_eng_heb {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&to 0>, <&to 1>;
        };

        // To KEYBOARD; Shifted: To MOUSE

        mm_nav: morph_nav_kb_ms {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&to 3>, <&to 5>;
        };

        // To SYMBOL; Shifted: To KEYBOARD

        mm_num_kb: morph_sym_nav_kb {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&to 2>, <&to 3>;
        };

        // To SYMBOL; Shifted: To MOUSE

        mm_sym_ms: morph_sym_nav_ms {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&to 2>, <&to 5>;
        };

        // FUNCTION PLUS TEN

        mm_fn1: morph_func_1_11 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp F1>, <&kp F11>;
        };

        mm_fn2: morph_func_2_12 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp F2>, <&kp F12>;
        };

        mm_fn3: morph_func_3_13 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp F3>, <&kp F13>;
        };

        mm_fn4: morph_func_4_14 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp F4>, <&kp F14>;
        };

        mm_fn5: morph_func_5_15 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp F5>, <&kp F15>;
        };

        mm_fn6: morph_func_6_16 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp F6>, <&kp F16>;
        };

        mm_fn7: morph_func_7_17 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp F7>, <&kp F17>;
        };

        mm_fn8: morph_func_8_18 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp F8>, <&kp F18>;
        };

        mm_fn9: morph_func_9_19 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp F9>, <&kp F19>;
        };

        mm_fn10: morph_func_10_20 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp F10>, <&kp F20>;
        };

        // INTERNET SHORTCUTS

        mm_tab_next_prev: morph_internet_tab_next_prev {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp RC(TAB)>, <&kp RC(RS(TAB))>;
        };

        mm_tab_open_close: morph_internet_tab_open_close {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RCTL)>;
            bindings = <&kp RC(T)>, <&kp LC(W)>;
        };

        mm_tab_refresh_reopen: morph_internet_tab_refresh_reop {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RCTL)>;
            bindings = <&kp RC(R)>, <&kp LS(LC(T))>;
        };

        mm_pg_next_prev: morph_internet_page_next_prev {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp LA(RIGHT_ARROW)>, <&kp LA(LEFT_ARROW)>;
        };

        mm_alt_tab: morph_alt_tab_switcher {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp TAB>, <&to_alt_tab>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };
    };

    macros {
        ellipsis: ellipsis {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp DOT &kp DOT>;
        };

        heb_ellipsis: heb_ellipsis {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HE_DOT &kp HE_DOT &kp HE_DOT>;
        };

        tri_dquote: triple_double_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp DQT &kp DQT>;
        };

        heb_tri_dquote: heb_triple_double_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HE_DQT &kp HE_DQT &kp HE_DQT>;
        };

        tri_ques: triple_question {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp QUESTION &kp QUESTION &kp QUESTION>;
        };

        heb_tri_ques: heb_triple_question {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HE_QUESTION &kp HE_QUESTION &kp HE_QUESTION>;
        };

        to_alt_tab: to_alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&to 4>,
                <&macro_pause_for_release>,
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_pause_for_release>;

            label = "TO_ALT_TAB";
        };

        out_alt_tab: alt_tab_x {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_release>,
                <&kp LEFT_ALT>,
                <&macro_release>,
                <&mo 4>;

            label = "ALT_TAB_X";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        ENG {
            display-name = "English";
            bindings = <
&kp Q  &kp W  &kp F  &kp D        &kp B            &kp J          &kp L           &kp U  &kp Y  &kp P
&kp A  &kp R  &kp S  &hml LGUI T  &kp G            &kp M          &hmr RGUI N     &kp E  &kp I  &kp O
       &kp X  &kp C  &kp V                                        &kp H           &kp K  &kp Z
                     &sk LALT     &sk LCTRL        &scw 0 RSHIFT  &sht MEH SPACE
            >;
        };

        HEB {
            display-name = "Hebrew";
            bindings = <
&kp HE_ZAYIN  &kp HE_QOF     &kp HE_RESH   &kp HE_ALEF       &kp HE_TET         &kp HE_VAV  &kp HE_FNUN       &kp HE_FMEM   &kp HE_PE    &kp HE_FPE
&kp HE_SHIN   &kp HE_DALET   &kp HE_GIMEL  &hml LGUI HE_KAF  &kp HE_AYIN        &kp HE_YOD  &hmr RGUI HE_HET  &kp HE_LAMED  &kp HE_FKAF  &kp HE_TAV
              &kp HE_SAMEKH  &kp HE_BET    &kp HE_HE                                        &kp HE_NUN        &kp HE_MEM    &mm_htsdi
                                           &trans            &trans             &trans      &trans
            >;
        };

        NUM {
            display-name = "Numbers";
            bindings = <
&kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_N4  &kp KP_N5        &kp KP_N6  &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_N0
&mm_fn1    &none      &none      &kp LGUI   &mm_fn5          &mm_fn6    &kp RGUI   &none      &none      &mm_fn10
           &mm_fn2    &mm_fn3    &mm_fn4                                &mm_fn7    &mm_fn8    &mm_fn9
                                 &trans     &trans           &trans     &trans
            >;
        };

        KBNV {
            display-name = "Keyboard_Nav";
            bindings = <
&kp EXIT_APP  &none            &kp CSCRN     &kp PSCRN  &kp PG_UP        &kp END   &mm_pg_next_prev  &mm_tab_next_prev  &mm_tab_refresh_reopen  &mm_tab_open_close
&kp C_PP      &mkp MCLK        &mkp LCLK     &mkp RCLK  &kp PG_DN        &kp HOME  &kp LEFT          &kp DOWN           &kp UP                  &kp RIGHT
              &mm_vol_dn_mute  &kp C_VOL_UP  &kp LGUI                              &none             &none              &none
                                             &trans     &trans           &trans    &trans
            >;
        };

        alt_tab {
            bindings = <
&out_alt_tab  &out_alt_tab  &out_alt_tab  &out_alt_tab  &out_alt_tab        &out_alt_tab  &out_alt_tab  &out_alt_tab  &out_alt_tab  &out_alt_tab
&out_alt_tab  &out_alt_tab  &out_alt_tab  &out_alt_tab  &out_alt_tab        &out_alt_tab  &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT
              &out_alt_tab  &out_alt_tab  &out_alt_tab                                    &out_alt_tab  &out_alt_tab  &out_alt_tab
                                          &out_alt_tab  &out_alt_tab        &out_alt_tab  &out_alt_tab
            >;
        };

        BLTH {
            display-name = "Bluetooth";
            bindings = <
&bootloader   &none         &out OUT_USB  &out OUT_BLE  &bt BT_NXT        &none  &none  &none  &none  &bootloader
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_PRV        &none  &none  &none  &none  &none
              &bt BT_CLR    &to 3         &to 2                                  &none  &none  &none
                                          &to 0         &to 1             &none  &none
            >;
        };
    };
};
