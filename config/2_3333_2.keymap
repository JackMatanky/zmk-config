/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>

// Hebrew Keymap

#include "keys_hebrew.h"

// Extra Keys

#include "shortcut.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define MEH LC(LS(LALT))
#define HYP LC(LS(LA(LGUI)))

// Behavior Defaults

&mt {
    tapping_term_ms = <200>;
    flavor = "tap-preferred";
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

&caps_word { continue-list = <BACKSPACE DELETE UNDERSCORE MINUS BSPC DEL NUMBER_1 NUMBER_2 NUMBER_3 NUMBER_4 NUMBER_5 NUMBER_6 NUMBER_7 NUMBER_8 NUMBER_9 NUMBER_0 N1 N2 N3 N4 N5 N6 N7 N8 N9 N0 KP_N1 KP_N2 KP_N3 KP_N4 KP_N5 KP_N6 KP_N7 KP_N8 KP_N9 KP_N0>; };

// Behaviors Constants

#define long_tap 200
#define short_tap 150

// Combos Constants
// #define default_timeout 50
// Layers

#define ENG    0
#define HEB    1
#define NUM    2
#define SYS    3

// #define MSNV   4

#define ALTAB  4 // 5
#define BLTH   5 // 6

/* Source: https://github.com/caksoylar/zmk-config

#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS, TERM, QUICKTAP) \
   combo_##NAME { \
     timeout-ms = <TERM>; \
     bindings = <BINDINGS>; \
     key-positions = <KEYPOS>; \
     layers = <LAYERS>; \
     global-quick-tap-ms = <QUICKTAP>; \
   };
*/
/*
* KEY POSITIONS - 32 Key Matrix
* ╭─────────────────────╮ ╭─────────────────────╮
* │ LT4 LT3 LT2 LT1 LT0 │ │ RT0 RT1 RT2 RT3 RT4 │
* │ LM4 LM3 LM2 LM1 LM0 │ │ RM0 RM1 RM2 RM3 RM4 │
* ╰───╮ LB3 LB2 LB1 LB0 │ │ RB0 RB1 RB2 RB3 ╭───╯
*     ╰───────╮ LH1 LH0 │ │ RH0 RH1 ╭───────╯
*             ╰─────────╯ ╰─────────╯ 
* 
* ╭────────────────╮ ╭────────────────╮
* │  0  1  2  3  4 │ │  5  6  7  8  9 │
* │ 10 11 12 13 14 │ │ 15 16 17 18 19 │
* ╰──╮ 20 21 22 23 │ │ 24 25 26 27 ╭──╯
*    ╰─────╮ 28 29 │ │ 30 31 ╭─────╯
*          ╰───────╯ ╰───────╯         
*/

/ {
    combos {
        compatible = "zmk,combos";

        // To Layer

        combo_english {
            bindings = <&to 0>;
            key-positions = <28 31>;
            timeout-ms = <50>;
        };

        combo_hebrew {
            bindings = <&to_hebrew>;
            key-positions = <14 15>;
            timeout-ms = <50>;
            layers = <0 2 3 4 5>;
        };

        combo_out_hebrew {
            bindings = <&out_hebrew>;
            key-positions = <14 15>;
            timeout-ms = <50>;
            layers = <1>;
        };

        // combo_number {
        //     bindings = <&to 2>;
        //     key-positions = <28 29>;
        //     timeout-ms = <50>;
        // };
        // combo_system_keyboard {
        //     bindings = <&to 3>;
        //     key-positions = <30 31>;
        //     timeout-ms = <50>;
        // };

        combo_bluetooth_mid_index {
            bindings = <&to 5>;
            key-positions = <2 3 6 7>;
            timeout-ms = <50>;
        };

        combo_bluetooth_left {
            bindings = <&to 5>;
            key-positions = <1 2 3>;
            timeout-ms = <50>;
        };

        // General

        combo_tab {
            bindings = <&mm_alt_tab>;
            key-positions = <0 10>;
            timeout-ms = <50>;
            layers = <0 1 2 3>;
        };

        combo_escape {
            bindings = <&kp ESCAPE>;
            key-positions = <4 14>;
            timeout-ms = <50>;
            layers = <0 1 2 3>;
        };

        combo_bspc_del {
            bindings = <&mm_back_del>;
            key-positions = <5 15>;
            timeout-ms = <50>;
            layers = <0 1 2 3>;
        };

        combo_return {
            bindings = <&kp RETURN>;
            key-positions = <9 19>;
            timeout-ms = <50>;
            layers = <0 1 2 3>;
        };

        combo_caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <4 5>;
            timeout-ms = <50>;
            layers = <0 1>;
        };

        // Shortcuts
        //Right

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <0 11>;
            timeout-ms = <50>;
            layers = <0 1 2 3>;
        };

        combo_undo {
            bindings = <&kp LC(Z)>;
            key-positions = <10 20>;
            timeout-ms = <50>;
            layers = <0 1 2 3>;
        };

        // Left

        combo_paste {
            bindings = <&kp LC(V)>;
            key-positions = <9 18>;
            timeout-ms = <50>;
            layers = <0 1 2 3>;
        };

        combo_redo {
            bindings = <&kp LC(Y)>;
            key-positions = <19 27>;
            timeout-ms = <50>;
            layers = <0 1 2 3>;
        };

        // Top Row (left to right)

        combo_less_than_equal {
            bindings = <&mm_le>;
            key-positions = <0 1>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_lbrace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <1 2>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_lbracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <2 3>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_lparenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <3 4>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        // Right

        combo_rparenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <5 6>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_rbracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <6 7>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_rbrace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <7 8>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_greater_than_equal {
            bindings = <&mm_ge>;
            key-positions = <8 9>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        // Top-Home 
        // Left

        combo_at_sign {
            bindings = <&kp AT_SIGN>;
            key-positions = <1 11>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_hash {
            bindings = <&kp HASH>;
            key-positions = <2 12>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <3 13>;
            timeout-ms = <50>;
            layers = <0 2>;
        };

        combo_shekel {
            bindings = <&kp HE_NEW_SHEQEL>;
            key-positions = <3 13>;
            timeout-ms = <50>;
            layers = <1>;
        };

        // Right

        combo_ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <6 16>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <7 17>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_fslash {
            bindings = <&kp SLASH>;
            key-positions = <8 18>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        // Home-Bottom

        combo_z {
            bindings = <&kp Z>;
            key-positions = <11 20>;
        };

        combo_backtick {
            bindings = <&kp GRAVE>;
            key-positions = <12 21>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <13 22>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        // Left

        combo_hyphen {
            bindings = <&kp MINUS>;
            key-positions = <16 25>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <17 26>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_question_excl {
            bindings = <&td_qe>;
            key-positions = <18 27>;
            layers = <0 2 3>;
        };

        combo_heb_question_excl {
            bindings = <&td_hqe>;
            key-positions = <18 27>;
            layers = <1>;
        };

        // Middle Row (left to right)
        // Left

        combo_tilde {
            bindings = <&kp TILDE>;
            key-positions = <13 14>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        // Right

        combo_equal_unequal {
            bindings = <&mm_eq>;
            key-positions = <15 16>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        // Bottom Row (left to right)
        // Left

        combo_caret {
            bindings = <&kp CARET>;
            key-positions = <20 21>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_percent {
            bindings = <&kp PERCENT>;
            key-positions = <21 22>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_bslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <22 23>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        // Right

        combo_pipe {
            bindings = <&kp PIPE>;
            key-positions = <24 25>;
            timeout-ms = <50>;
            layers = <0 1 2>;
        };

        combo_bluetooth_right {
            bindings = <&to 5>;
            key-positions = <6 7 8>;
            timeout-ms = <50>;
        };
    };

    behaviors {
        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23>;
        };

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 24 25 26 27>;
        };

        sht: sticky_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&sk>, <&kp>;
        };

        khst: key_hold_sticky_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&sk>;
        };

        scw: sticky_shift_capsword {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&caps_word>, <&sk>;
        };

        // LAYER
        // To ENGLISH; Shifted: To Hebrew

        mm_eng_heb: morph_to_english_hebrew {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&to 0>, <&to 1>;
        };

        // To KEYBOARD; Shifted: To MOUSE

        mm_sys_ms: morph_to_system_mouse {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&to 3>, <&to 5>;
        };

        // To SYMBOL; Shifted: To KEYBOARD

        mm_num_sys: morph_to_number_system {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&to 2>, <&to 3>;
        };

        // To SYMBOL; Shifted: To MOUSE

        mm_num_ms: morph_to_number_mouse {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&to 2>, <&to 5>;
        };

        // MOD MORPHS
        // GENERAL

        mm_back_del: morph_backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
        };

        mm_alt_tab: morph_alt_tab {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
            bindings = <&kp TAB>, <&to_alt_tab>;
        };

        mm_vol_dn_mute: morph_volume_down_mute {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RCTL)>;
            bindings = <&kp C_VOL_DN>, <&kp C_MUTE>;
        };

        // INTERNET SHORTCUTS

        mm_tb_next_prev: morph_internet_tab_next_prev {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp RC(TAB)>, <&kp RC(RS(TAB))>;
        };

        mm_tb_open_close: morph_internet_tab_open_close {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RCTL)>;
            bindings = <&kp RC(T)>, <&kp LC(W)>;
        };

        mm_tb_refresh_reopen: morph_internet_tab_refresh_reop {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RCTL)>;
            bindings = <&kp RC(R)>, <&kp LS(LC(T))>;
        };

        mm_pg_next_prev: morph_internet_page_next_prev {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp LA(RIGHT_ARROW)>, <&kp LA(LEFT_ARROW)>;
        };

        // PUNCTUATION: English
        // Mod-Morph: Period "."; Colon ":"

        mm_dc: morph_period_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp PERIOD>, <&kp COLON>;
        };

        // Tap-Dance: 1) Mod-Morph Period-Colon; 2) Ellipsis "..."

        td_dc: tap_period_colon {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mm_dc>, <&ellipsis>;
        };

        // Mod-Morph: Comma ","; Semicolon ";"

        mm_cs: morph_comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
        };

        // Tap-Dance: 1) Comma ","; 2) Semicolon ";"

        td_cs: tap_comma_semicolon {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
        };

        // 1: Single quote "'"; 2: Double quote """; 3: Triple-double quote """""

        td_stq: tap_single_double_triple_quote {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>, <&tri_dquote>;
        };

        // Mod-Morph: Question "?"; Exclamation "!"

        mm_qe: morph_question_exclamation {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;
        };

        // Tap-Dance: 1) Mod-Morph Question-Exclamation; 2) Triple Question "???"

        td_qe: tap_question_exclamation {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mm_qe>, <&tri_ques>;
        };

        // PUNCTUATION: Hebrew
        // Mod-Morph: Period "."; Colon ":"

        mm_hdc: morph_heb_period_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp HE_PERIOD>, <&kp HE_COLON>;
        };

        // 1) Mod-Morph Period-Colon; 2) Ellipsis "..."

        td_hdc: tap_heb_period_colon {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mm_hdc>, <&heb_ellipsis>;
        };

        // Mod-Morph: Comma ","; Semicolon ";"

        mm_hcs: morph_heb_comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp HE_COMMA>, <&kp HE_SEMICOLON>;
        };

        // Tap-Dance: 1) Comma ","; 2) Semicolon ";"

        td_hcs: tap_heb_comma_semicolon {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp HE_COMMA>, <&kp HE_SEMICOLON>;
        };

        // Mod-Morph: Single Quote "'"; Double Quote """

        mm_hsdq: morph_heb_single_double_quote {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp HE_SINGLE_QUOTE>, <&kp HE_DOUBLE_QUOTES>;
        };

        // Tap-Dance: 1) Mod-Morph Single-Double Quote; 2) Triple-Double Quote """""

        td_hstq: tap_heb_single_double_triple_quote {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mm_hsdq>, <&heb_tri_dquote>;
        };

        // Mod-Morph: Question "?"; Exclamation "!"

        mm_hqe: morph_heb_question_exclamation {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp HE_QUESTION>, <&kp HE_EXCLAMATION>;
        };

        // Tap-Dance: 1) Mod-Morph Question-Exclamation; 2) Triple Question Mark "???"

        td_hqe: tap_heb_question_exclamation {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mm_hqe>, <&heb_tri_ques>;
        };

        // Mod-Morph: Nun פ; Final Nun ף

        mm_hnun: morph_heb_nun {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp HE_NUN>, <&kp HE_FNUN>;
        };

        // Mod-Morph: Peh פ; Final Peh ף

        mm_hpe: morph_heb_pe {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp HE_PE>, <&kp HE_FPE>;
        };

        // Mod-Morph: Tsadi צ; Final Tsadi ץ

        mm_htsdi: morph_heb_tsadi {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp HE_TSADI>, <&kp HE_FTSADI>;
        };

        // MATH OPERATORS

        mm_eq: morph_un_equal {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp EQUAL>, <&unequal>;
        };

        mm_ge: morph_greater_equal {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp GREATER_THAN>, <&gr_equal>;
        };

        mm_le: morph_less_than_equal {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp LESS_THAN>, <&ls_equal>;
        };

        // FUNCTION PLUS TEN

        mm_fn1: morph_func_1_11 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp F1>, <&kp F11>;
        };

        mm_fn2: morph_func_2_12 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp F2>, <&kp F12>;
        };

        mm_fn3: morph_func_3_13 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp F3>, <&kp F13>;
        };

        mm_fn4: morph_func_4_14 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp F4>, <&kp F14>;
        };

        mm_fn5: morph_func_5_15 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp F5>, <&kp F15>;
        };

        mm_fn6: morph_func_6_16 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp F6>, <&kp F16>;
        };

        mm_fn7: morph_func_7_17 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp F7>, <&kp F17>;
        };

        mm_fn8: morph_func_8_18 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp F8>, <&kp F18>;
        };

        mm_fn9: morph_func_9_19 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp F9>, <&kp F19>;
        };

        mm_fn10: morph_func_10_20 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp F10>, <&kp F20>;
        };
    };

    macros {
        to_hebrew: to_hebrew {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE) &to 1>;
        };

        out_hebrew: out_hebrew {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE) &to 0>;
        };

        to_alt_tab: to_alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 4>,
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp TAB>;
        };

        out_alt_tab: alt_tab_x {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_release>, <&kp LEFT_ALT &mo 4>;
        };

        ellipsis: ellipsis {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp DOT &kp DOT>;
        };

        heb_ellipsis: heb_ellipsis {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HE_DOT &kp HE_DOT &kp HE_DOT>;
        };

        tri_dquote: triple_double_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp DQT &kp DQT>;
        };

        heb_tri_dquote: heb_triple_double_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HE_DQT &kp HE_DQT &kp HE_DQT>;
        };

        tri_ques: triple_question {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp QUESTION &kp QUESTION &kp QUESTION>;
        };

        heb_tri_ques: heb_triple_question {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HE_QUESTION &kp HE_QUESTION &kp HE_QUESTION>;
        };

        gr_equal: greater_than_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GREATER_THAN &kp EQUAL>;
        };

        ls_equal: less_than_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN &kp EQUAL>;
        };

        unequal: exclamation_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCLAMATION &kp EQUAL>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        ENG {
            display-name = "English";
            bindings = <
&kp Q  &kp W  &kp C        &kp P              &kp B                &kp J           &kp L        &kp U        &kp Y   &td_stq
&kp A  &kp R  &hml LALT S  &hml LGUI T        &kp G                &kp M           &hmr RGUI N  &hmr RALT E  &kp I   &kp O
       &kp X  &kp F        &kp D              &kp K                &kp V           &kp H        &mm_cs       &td_dc
                           &khst LCTRL LCTRL  &scw 0 RSHIFT        &sht MEH SPACE  &mm_num_sys
            >;
        };

        HEB {
            display-name = "Hebrew";
            bindings = <
&kp HE_ZAYIN  &kp HE_QOF     &kp HE_RESH         &kp HE_ALEF       &kp HE_TET         &kp HE_VAV  &kp HE_FNUN       &kp HE_FMEM         &mm_htsdi    &td_hstq
&kp HE_SHIN   &kp HE_DALET   &hml LALT HE_GIMEL  &hml LGUI HE_KAF  &kp HE_AYIN        &kp HE_YOD  &hmr RGUI HE_HET  &hmr RALT HE_LAMED  &kp HE_FKAF  &mm_hpe
              &kp HE_SAMEKH  &kp HE_BET          &kp HE_HE         &kp HE_NUN         &kp HE_MEM  &kp HE_TAV        &mm_hcs             &td_hdc
                                                 &trans            &trans             &trans      &trans
            >;
        };

        NUM {
            display-name = "Number-FN";
            bindings = <
&kp N1   &kp N2   &kp N3    &kp N4    &kp N5                   &kp N6   &kp N7    &kp N8    &kp N9   &kp N0
&mm_fn1  &none    &kp LALT  &kp LGUI  &none                    &none    &kp RGUI  &kp RALT  &none    &mm_fn10
         &mm_fn2  &mm_fn3   &mm_fn4   &mm_fn5                  &mm_fn6  &mm_fn7   &mm_fn8   &mm_fn9
                            &trans    &khst LSHFT LSHFT        &trans   &to 3
            >;
        };

        SYS {
            display-name = "System";
            bindings = <
&kp EXIT_APP  &none            &kp CSCRN     &kp PSCRN  &kp PG_UP        &kp HOME  &mm_pg_next_prev  &mm_tb_next_prev  &mm_tb_refresh_reopen  &mm_tb_open_close
&kp C_PP      &mkp MCLK        &mkp LCLK     &mkp RCLK  &kp PG_DN        &kp END   &kp LEFT          &kp DOWN          &kp UP                 &kp RIGHT
              &mm_vol_dn_mute  &kp C_VOL_UP  &kp RGUI   &none            &none     &none             &none             &none
                                             &trans     &trans           &trans    &trans
            >;
        };

        ALTAB {
            bindings = <
&out_alt_tab  &out_alt_tab  &out_alt_tab  &out_alt_tab  &out_alt_tab        &out_alt_tab  &out_alt_tab    &out_alt_tab  &out_alt_tab  &out_alt_tab
&out_alt_tab  &out_alt_tab  &out_alt_tab  &out_alt_tab  &out_alt_tab        &out_alt_tab  &kp LEFT_ARROW  &kp DOWN      &kp UP        &kp RIGHT
              &out_alt_tab  &out_alt_tab  &out_alt_tab  &out_alt_tab        &out_alt_tab  &out_alt_tab    &out_alt_tab  &out_alt_tab
                                          &out_alt_tab  &out_alt_tab        &out_alt_tab  &out_alt_tab
            >;
        };

        BLTH {
            display-name = "Bluetooth";
            bindings = <
&bootloader   &out OUT_TOG  &out OUT_BLE  &out OUT_USB  &none        &none  &out OUT_USB  &out OUT_BLE  &out OUT_TOG  &bootloader
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &none        &none  &none         &none         &none         &none
              &bt BT_CLR    &bt BT_PRV    &bt BT_NXT    &none        &none  &bt BT_NXT    &bt BT_PRV    &none
                                          &none         &none        &none  &none
            >;
        };
    };
};
