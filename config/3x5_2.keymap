/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>

// Keymaps

#include "../../../../keys/hebrew.h"
#include "../../../../keys/shortcut.h"
#include "../../../../keys/mod.h"
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping_term_ms = <200>;
    flavor = "tap-preferred";
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

// Behaviors Constants

#define long_tap 200
#define short_tap 150

// Combos Constants

#define default_timeout 50

// Layers

#define ENG    0
#define HEB    1
#define SYM    2
#define KBNV   3
#define MSNV   4
#define BLTH   5

/ {
    combos {
        compatible = "zmk,combos";

        /* 34 Key Matrix
* ╭──────────────╮ ╭──────────────╮
* │ 0  1  2  3  4│ │ 5  6  7  8  9│
* │10 11 12 13 14│ │15 16 17 18 19│
* │20 21 22 23 24│ │25 26 27 28 29│
* ╰────────╮30 31│ │32 33╭────────╯
*          ╰─────╯ ╰─────╯         
*/
        // General combos

        combo_to_base {
            bindings = <&to ENG>;
            key-positions = <30 33>;
            timeout-ms = <default_timeout>;
        };

        combo_to_bt {
            bindings = <&to BLTH>;
            key-positions = <0 9>;
            timeout-ms = <default_timeout>;
            layers = <0 1 2 3 4>;
        };

        // Alphanumeric-Layer combos

        combo_caps_word {
            bindings = <&caps_word>;
            key-positions = <24 25>;
            timeout-ms = <default_timeout>;
            layers = <0 1 2>;
        };

        // Top Row (left to right)

        combo_escape {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            timeout-ms = <default_timeout>;
            layers = <0 1 2>;
        };

        combo_backtick {
            bindings = <&kp GRAVE>;
            timeout-ms = <default_timeout>;
            key-positions = <1 2>;
            layers = <0 1 2>;
        };

        combo_at_sign {
            bindings = <&kp AT_SIGN>;
            timeout-ms = <default_timeout>;
            key-positions = <2 3>;
            layers = <0 1 2>;
        };

        combo_hyphen {
            bindings = <&kp KP_MINUS>;
            timeout-ms = <default_timeout>;
            key-positions = <6 7>;
            layers = <0 1 2>;
        };

        combo_underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <7 8>;
            timeout-ms = <default_timeout>;
            layers = <0 1 2>;
        };

        combo_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
            timeout-ms = <default_timeout>;
            layers = <0 1 2>;
        };

        // Middle row

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
            timeout-ms = <default_timeout>;
            layers = <0 1 2>;
        };

        combo_return {
            bindings = <&kp RETURN>;
            key-positions = <18 19>;
            timeout-ms = <default_timeout>;
            layers = <0 1 2>;
        };

        // Bottom row

        combo_hash {
            bindings = <&kp HASH>;
            key-positions = <20 21>;
            timeout-ms = <default_timeout>;
            layers = <0 1 2>;
        };

        combo_dollar {
            timeout-ms = <default_timeout>;
            key-positions = <22 23>;
            bindings = <&kp DOLLAR>;
            layers = <0 2>;
        };

        combo_shekel {
            bindings = <&kp H_SHKL>;
            key-positions = <22 23>;
            timeout-ms = <default_timeout>;
            layers = <1>;
        };

        combo_asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <26 27>;
            timeout-ms = <default_timeout>;
            layers = <0 1 2>;
        };

        combo_slash {
            bindings = <&kp FSLH>;
            key-positions = <28 29>;
            timeout-ms = <default_timeout>;
            layers = <0 1 2>;
        };

        combo_sym_to_heb {
            bindings = <&to 1>;
            key-positions = <31 29>;
            layers = <2>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        smt: sticky_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&sk>, <&kp>;
        };

        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        // 1: Period "."; 2: Colon ":"; 3: Ellipsis "..."

        td_dc: tap_dot_colon {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp DOT>, <&kp COLON>, <&ellipsis>;
        };

        // 1: Comma ","; 2: Semicolon ";"

        td_cs: tap_comma_semicolon {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
        };

        // 1: Single quote "'"; 2: Double quote """; 3: Triple-double quote """""

        td_qt: tap_quote {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings =
                <&kp SINGLE_QUOTE>,
                <&kp DOUBLE_QUOTES>,
                <&triple_double_quote>;
        };

        // 1: Question mark "?"; 2: Exclamation mark "!"

        td_qe: tap_ques_excl {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings =
                <&kp QUESTION>,
                <&kp EXCLAMATION>,
                <&kp QUESTION &kp QUESTION &kp QUESTION>;
        };

        // 1: Period "."; 2: Colon ":"; 3: Ellipsis "..."

        td_hdc: tap_heb_dot_colon {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings =
                <&kp H_DOT>,
                <&kp H_COLON>,
                <&kp H_DOT &kp H_DOT &kp H_DOT>;
        };

        // 1: Comma ","; 2: Semicolon ";"

        td_hcs: tap_heb_comma_semicolon {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp H_COMMA>, <&kp H_SEMI>;
        };

        // 1: Single quote "'"; 2: Double quote """; 3: Triple-double quote """""

        td_hqt: tap_heb_quote {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings =
                <&kp H_SQT>,
                <&kp H_DQT>,
                <&kp H_DQT &kp H_DQT &kp H_DQT>;
        };

        // 1: Question mark "?"; 2: Exclamation mark "!"

        td_hqe: tap_heb_ques_excl {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp H_QMARK>, <&kp H_EXCL>;
        };

        // 1: Question mark "?"; 2: Exclamation mark "!"

        td_htsdi: tap_heb_tsadi {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp H_TSDI>, <&kp H_FTSDI>;
        };

        // Number-Function Mod-Morph

        mm_fn1: morph_num_func_1 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp KP_N1>, <&kp F1>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_fn2: morph_num_func_2 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp KP_N2>, <&kp F2>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_fn3: morph_num_func_3 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp KP_N3>, <&kp F3>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_fn4: morph_num_func_4 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp KP_N4>, <&kp F4>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_fn5: morph_num_func_5 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp KP_N5>, <&kp F5>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_fn6: morph_num_func_6 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp KP_N6>, <&kp F6>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_fn7: morph_num_func_7 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp KP_N7>, <&kp F7>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_fn8: morph_num_func_8 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp KP_N8>, <&kp F8>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_fn9: morph_num_func_9 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp KP_N9>, <&kp F9>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_fn0: morph_num_func_10 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp KP_N0>, <&kp F10>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_eng_heb: mod_to_eng_heb {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&to 0>, <&to 1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        ellipsis: ellipsis {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp DOT &kp DOT>;
            label = "ELLIPSIS";
        };

        triple_double_quote: triple_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp DQT &kp DQT>;
            label = "TRIPLE_QUOTE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        ENG {
            display-name = "English";
            bindings = <
&kp Q    &kp W    &kp F         &kp P             &kp B              &kp J        &kp L         &kp U         &kp Y     &td_qt
&kp A    &kp R    &hm LALT S    &hm LGUI T        &kp G              &kp M        &hm RGUI N    &hm RALT E    &kp I     &kp O
&kp Z    &kp X    &kp C         &kp D             &kp V              &kp K        &kp H         &td_cs        &td_dc    &td_qe
                                &smt MEH SPACE    &mt CAPS LSHIFT    &sk RCTRL    &to 2
            >;
        };

        HEB {
            display-name = "Hebrew";
            bindings = <
&kp H_QOF     &kp H_RESH    &kp H_ALEF         &kp H_TET         &kp H_VAV          &kp H_FNUN    &kp H_FMEM        &kp H_PE           &td_htsdi     &td_hqt
&kp H_SHIN    &kp H_DALT    &hm LALT H_GIML    &hm LGUI H_KAF    &kp H_AYIN         &kp H_YOD     &hm RGUI H_HET    &hm RALT H_LAMD    &kp H_FKAF    &kp H_FPE
&kp H_ZAYN    &kp H_SMKH    &kp H_BET          &kp H_HE          &kp H_NUN          &kp H_MEM     &kp H_TAV         &td_hcs            &td_hdc       &td_hqe
                                               &smt MEH SPACE    &mt CAPS LSHIFT    &sk RCTRL     &to 2
            >;
        };

        SYM {
            display-name = "Symbols";
            bindings = <
&mm_fn1          &mm_fn2      &mm_fn3              &mm_fn4             &mm_fn5       &mm_fn6          &mm_fn7          &mm_fn8          &mm_fn9     &mm_fn0
&kp EQUAL        &kp CARET    &hm LALT KP_MINUS    &hm LGUI KP_PLUS    &kp PRCNT     &kp AMPERSAND    &hm RGUI LPAR    &hm RALT RPAR    &kp LBKT    &kp RBKT
&kp BACKSLASH    &kp PIPE     &none                &kp TILDE           &none         &none            &kp LBRC         &kp RBRC         &kp LT      &mm_eng_heb
                                                   &smt MEH SPACE      &kp LSHIFT    &sk RCTRL        &to 3
            >;
        };

        KBNV {
            display-name = "Keyboard_Nav";
            bindings = <
&kp ESC             &kp KB_REDO    &kp KB_UNDO     &kp CSCRN        &kp PSCRN     &kp RC(R)    &kp RC(TAB)    &kp RA(RIGHT)    &kp RC(T)    &kp BSPC
&mt SWCH_APP TAB    &kp KB_COPY    &kp KB_PASTE    &mkp LCLK        &mkp RCLK     &kp LEFT     &kp DOWN       &kp UP           &kp RIGHT    &kp RET
&kp LALT            &kp LC(Y)      &kp LC(Z)       &kp LC(C)        &kp LC(V)     &kp HOME     &kp PG_DN      &kp PG_UP        &kp END      &mm_eng_heb
                                                   &smt MEH LGUI    &sk LSHIFT    &sk RCTRL    &to 2
            >;
        };

        MSNV {
            display-name = "Mouse_Nav";
            bindings = <
&kp ESC             &kp KB_REDO    &kp KB_UNDO     &kp CSCRN        &kp PSCRN     &kp RC(R)           &kp RC(TAB)         &kp RA(RIGHT)     &kp RC(T)            &kp BSPC
&mt SWCH_APP TAB    &kp KB_COPY    &kp KB_PASTE    &mkp LCLK        &mkp RCLK     &mmv MOVE_LEFT      &mmv MOVE_DOWN      &mmv MOVE_UP      &mmv MOVE_RIGHT      &kp RET
&kp LALT            &kp LC(Y)      &kp LC(Z)       &kp LC(C)        &kp LC(V)     &mwh SCROLL_LEFT    &mwh SCROLL_DOWN    &mwh SCROLL_UP    &mwh SCROLL_RIGHT    &mm_eng_heb
                                                   &smt MEH LGUI    &sk LSHIFT    &sk RCTRL           &none
            >;
        };

        BLTH {
            display-name = "Bluetooth";
            bindings = <
&bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4    &trans    &trans    &trans    &trans    &bt BT_PRV
&trans          &trans          &trans          &trans          &trans          &trans    &trans    &trans    &trans    &bt BT_NXT
&bootloader     &trans          &trans          &trans          &trans          &trans    &trans    &trans    &trans    &bt BT_CLR
                                                &to 0           &to 1           &to 2     &to 3
            >;
        };
    };
};
