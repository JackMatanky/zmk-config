/*
* KEY POSITIONS
*         ╭─────────────────────────╮ ╭─────────────────────────╮
* HIGH:   │  LH4  LH3 LH2 LH1 [LH0] │ │ [RH0] RH1 RH2 RH3  RH4  │
* MIDDLE: │  LM4  LM3 LM2 LM1 [LM0] │ │ [RM0] RM1 RM2 RM3  RM4  │
* LOW:    │ [LL4] LL3 LL2 LL1 [LL0] │ │ [RL0] RL1 RL2 RL3 [RL4] │
* THUMB:  ╰───────────╮   LT1  LT0  │ │  RT0  RT1 ╭─────────────╯
*                     ╰─────────────╯ ╰───────────╯ 
*/

// Combo parameters
//   timeout-ms:
//     All the keys in key-positions must be pressed within
//     this time in milliseconds to trigger the combo
//   bindings:
//     A behavior to run when the combo is triggered
//   key-positions:
//     A list of key position indices for the keys which should trigger the combo
//   layers:
//     A list of layers on which the combo may be triggered. -1 allows all layers.
//   require-prior-idle-ms:
//     If any non-modifier key is pressed within require-prior-idle-ms
//     before a key in the combo, the key will not be considered for the combo

// * Source: https://github.com/caksoylar/zmk-config
#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS, TERM, QUICKTAP, ...) \
    combo_##NAME { \
        timeout-ms = <TERM>; \
        bindings = <BINDINGS>; \
        key-positions = <KEYPOS>; \
        layers = <LAYERS>; \
        require-prior-idle-ms = <QUICKTAP>; \
		__VA_ARGS__ \
    };

// Position definitions
#ifdef INNER_0
#   define POS_TO_HEB  LM1 RM1
#elifdef INNER_1
#   define POS_PIPE    RM2 RL2
#else
#   define POS_TO_HEB  LM0 RM0
#   define POS_PIPE    RL3 RL2
#endif

#if defined INNER_0 || defined INNER_1
#   define POS_CPSWRD  LH1 RH1
#   define POS_ESCAPE  RH4 RH3
#   define POS_RETURN  RH4 RM4
#   define POS_BSPCDEL RH1 RM1
#   define POS_TILDE   LH4 LM3
#   define POS_UNDO    LM4 LL3
#   define POS_REDO    RM4 RL3
#   define POS_HYPHEN  RM1 RL1
#   define POS_CARET   RL3 RL2
#   define POS_AMPS    LM3 LM1
#   define POS_PRCNT   LM3 LL3
#   define POS_GRAVE   LM2 LL2
#   define POS_UNDER   LM1 LL1
#   define POS_BSLH    RM3 RL3
#else
#   define POS_CPSWRD  LH0 RH0
#   define POS_ESCAPE  LH0 LM0
#   define POS_RETURN  RH0 RM0
#   define POS_BSPCDEL RH4 RM4
#   define POS_TILDE   LL3 LL2
#   define POS_UNDO    LH4 LM3
#   define POS_REDO    RH4 RM3
#   define POS_HYPHEN  RH1 RM1
#   define POS_CARET   LL2 LL1
#   define POS_AMPS    LM1 LL1
#   define POS_PRCNT   LM2 LL2
#   define POS_GRAVE   RM2 RL2
#   define POS_UNDER   RM1 RL1
#   define POS_BSLH    RL2 RL1
#endif

/ {
    combos {
        compatible = "zmk,combos";

// Layers
COMBO(english,      &to ENG,        LT1 RT1,      ENG SYS FUN BLE,     50, 50)
COMBO(heb_to_eng,   &heb_x,         LT1 RT1,      HEB,                 50, 50)
COMBO(eng_to_heb,   &to_heb,        POS_TO_HEB,   ENG,                 50, 50)
COMBO(hebrew,       &to HEB,        POS_TO_HEB,   SYS FUN BLE,         50, 50)
COMBO(blth_l,       &to BLE,        LH3 LH2 LH1,  ENG HEB SYS FUN BLE, 50, 50)
COMBO(blth_r,       &to BLE,        RH3 RH2 RH1,  ENG HEB SYS FUN BLE, 50, 50)
        
// General
COMBO(capsword,     &caps_word,     POS_CPSWRD,   ENG HEB,             50, 50)
COMBO(escape,       &kp ESCAPE,     POS_ESCAPE,   ENG HEB SYS FUN,     50, 50)
COMBO(return,       &kp RETURN,     POS_RETURN,   ENG HEB SYS FUN,     20, 50)
COMBO(bspc_del,     &mm_bspc_del,   POS_BSPCDEL,  ENG HEB SYS FUN,     50, 50)
COMBO(capslock,     &kp CAPS,       LL1 RL1,      ENG HEB,             50, 50)
COMBO(alt_tab,      &atht 0 TAB,    LH4 LM4,      ENG HEB SYS FUN,     20, 50)

// Shortcuts
COMBO(copy_paste,   &mm_cpy_pst,    LH4 LH3,      ENG HEB SYS FUN,     50, 50)
// COMBO(paste,        &mm_paste,      RH4 RH3,      ENG HEB SYS FUN,     50, 50)
COMBO(undo,         &kp LC(Z),      POS_UNDO,     ENG HEB SYS FUN,     50, 50)
COMBO(redo,         &kp LC(Y),      POS_REDO,     ENG HEB SYS FUN,     50, 50)

// * Top to Bottom; Left to Right
        
// * Top Row
// * ╭───────┬───────┬───────┬───────┬───────╮   ╭───────┬───────┬───────┬───────┬───────╮
// *       Copy    <= /<    {/[      (                   )      ]/}     >/>=   Paste
// * ╰───────┴───────┴───────┴───────┴───────╯   ╰───────┴───────┴───────┴───────┴───────╯
// 
// * Top Row - 26
// * ╭───────┬───────┬───────┬───────╮   ╭───────┬───────┬───────┬───────╮
// *       Copy     {/[     </(                 >/)      ]/}   Paste      
// * ╰───────┴───────┴───────┴───────╯   ╰───────┴───────┴───────┴───────╯

#if defined INNER_0 || defined INNER_1
    // Left
    COMBO(brkt_l,       &kp LBKT,       LH3 LH2,      ENG SYS,              20, 50)
    COMBO(h_brkt_l,     &kp HE_LBKT,    LH3 LH2,      HEB,                  20, 50)
    COMBO(brc_l,        &kp LBRC,       LH3 LH1,      ENG SYS,              20, 50)
    COMBO(h_brc_l,      &kp HE_LBRC,    LH3 LH1,      HEB,                  20, 50)
    COMBO(lpar_less,    &mm_lplt,       LH2 LH1,      ENG SYS,              20, 50)
    COMBO(h_lpar_less,  &mm_hlplt,      LH2 LH1,      HEB,                  20, 50)
    // Right
    COMBO(rpar_great,   &mm_rpgt,       RH2 RH1,      ENG SYS,              20, 50)
    COMBO(h_rpar_great, &mm_hrpgt,      RH2 RH1,      HEB,                  20, 50)
    COMBO(brc_r,        &kp RBRC,       RH3 RH1,      ENG SYS,              20, 50)
    COMBO(h_brc_r,      &kp HE_RBRC,    RH3 RH1,      HEB,                  20, 50)
    COMBO(brkt_r,       &kp RBKT,       RH3 RH2,      ENG SYS,              20, 50)
    COMBO(h_brkt_r,     &kp HE_RBKT,    RH3 RH2,      HEB,                  20, 50)
#else
    // Left
    COMBO(lte,          &mm_lte,        LH3 LH2,      ENG SYS,              50, 50)
    COMBO(h_lte,        &mm_hlte,       LH3 LH2,      HEB,                  50, 50)
    COMBO(brkt_brc_l,   &kp LBKT,       LH2 LH1,      ENG SYS,              50, 50)
    COMBO(h_brkt_brc_l, &kp HE_LBKT,    LH2 LH1,      HEB,                  50, 50)
    COMBO(par_l,        &kp LPAR,       LH1 LH0,      ENG SYS,              50, 50)
    COMBO(h_par_l,      &kp HE_LPAR,    LH1 LH0,      HEB,                  50, 50)
    // Right
    COMBO(par_r,        &kp RPAR,       RH1 RH0,      ENG SYS,              50, 50)
    COMBO(h_par_r,      &kp HE_RPAR,    RH1 RH0,      HEB,                  50, 50)
    COMBO(brkt_brc_r,   &kp RBKT,       RH2 RH1,      ENG SYS,              50, 50)
    COMBO(h_brkt_brc_r, &kp HE_RBKT,    RH2 RH1,      HEB,                  50, 50)
    COMBO(gte,          &mm_gte,        RH3 RH2,      ENG SYS,              50, 50)
    COMBO(h_gte,        &mm_hgte,       RH3 RH2,      HEB,                  50, 50)
#endif


// * Top-Home
// * ╭───────┬───────┬───────┬───────┬───────╮   ╭───────┬───────┬───────┬───────┬───────╮
// *                                                del
// * ├─ tab ─┼─  @  ─┼─  #  ─┼─ ₪/$ ─┼─ esc ─┤   ├─  /  ─┼─  -  ─┼─  *  ─┼─  /  ─┼─ ret ─┤
// *                                               bspc
// * ╰───────┴───────┴───────┴───────┴───────╯   ╰───────┴───────┴───────┴───────┴───────╯

// Left
COMBO(at,           &kp AT,         LH3 LM3,      ENG HEB SYS,          50, 50)
COMBO(hash,         &kp HASH,       LH2 LM2,      ENG HEB SYS,          50, 50)
COMBO(dollar,       &kp DOLLAR,     LH1 LM1,      ENG SYS,              50, 50)
COMBO(h_nis,        &kp HE_NIS,     LH1 LM1,      HEB,                  50, 50)
// Right
COMBO(hyphen,       &kp MINUS,      POS_HYPHEN,   ENG HEB SYS,          50, 50)
COMBO(asterisk,     &kp ASTRK,      RH2 RM2,      ENG HEB SYS,          50, 50)
COMBO(fslash,       &kp FSLH,       RH3 RM3,      ENG SYS,              50, 50)
COMBO(h_fslash,     &kp HE_FSLH,    RH3 RM3,      HEB,                  50, 50)

// * Middle Row
// * ╭───────┬───────┬───────┬───────┬───────╮   ╭───────┬───────┬───────┬───────┬───────╮
// *                              != / =                 +
// * ╰───────┴───────┴───────┴───────┴───────╯   ╰───────┴───────┴───────┴───────┴───────╯

#ifdef INNER_0
    // Middle Row
    // Left Mid-Ring Top-Pinky
    COMBO(tilde,        &kp TILDE,      POS_TILDE,    ENG HEB SYS,          50, 50)
    // Left
    COMBO(v,            &kp V,          LM3 LM2,      ENG,                  20, 50)
    COMBO(zayin,        &kp HE_ZAYIN,   LM3 LM2,      HEB,                  20, 50)
    COMBO(sdqt,         &kp SQT,        LM3 LM1,      ENG SYS,              50, 50)
    COMBO(h_sdqt,       &mm_hsdq,       LM3 LM1,      HEB,                  50, 50)
    COMBO(k,            &kp K,          LM2 LM1,      ENG,                  20, 50)
    COMBO(ayin,         &kp HE_AYIN,    LM2 LM1,      HEB,                  20, 50)
    // Right
    COMBO(j,            &kp J,          RM2 RM1,      ENG,                  20, 50)
    COMBO(ques_excl,    &td_qe,         RM3 RM1,      ENG HEB SYS,          50, 50)
    COMBO(z,            &kp Z,          RM3 RM2,      ENG,                  20, 50)
    // Right Mid-Ring Top-Pinky
    COMBO(equal_plus,   &kp EQUAL,      RH4 RM3,      ENG HEB SYS,          50, 50)
#elifdef INNER_1
    // Middle Row
    // Left Mid-Ring Top-Pinky
    COMBO(tilde,        &kp TILDE,      POS_TILDE,    ENG HEB SYS,          50, 50)
    // Left
    COMBO(k,            &kp K,          LM2 LM1,      ENG,                  50, 50)
    COMBO(sdqt,         &kp SQT,        LM1 LM0,      ENG SYS,              50, 50)
    COMBO(h_sdqt,       &mm_hsdq,       LM1 LM0,      HEB,                  50, 50)
    // Right
    COMBO(ques_excl,    &td_qe,         RM1 RM0,      ENG HEB SYS,          50, 50)
    COMBO(z,            &kp Z,          RM2 RM1,      ENG,                  50, 50)
    COMBO(zayin,        &kp HE_ZAYIN,   RM2 RM1,      HEB,                  50, 50)
    COMBO(un_equal,     &mm_eq,         RM3 RM1,      ENG HEB SYS,          50, 50)
    // Right Mid-Ring Top-Pinky
    COMBO(plus,         &kp PLUS,       RH4 RM3,      ENG HEB SYS,          50, 50)

    // Right
    COMBO(pipe,         &kp PIPE,       POS_PIPE,     ENG HEB SYS,          50, 50)
#elifdef INNER_2
    // Left
    COMBO(un_equal,     &mm_eq,         LM1 LH0,      ENG HEB SYS,          50, 50)
    // Right
    COMBO(plus,         &kp PLUS,       RM1 RH0,      ENG HEB SYS,          50, 50)
#else
    // Left
    COMBO(un_equal,     &mm_eq,         LM1 LM0,      ENG HEB SYS,          50, 50)
    // Right
    COMBO(plus,         &kp PLUS,       RM1 RM0,      ENG HEB SYS,          50, 50)
#endif

// * Home-Bottom
// * ╭───────┬───────┬───────┬───────┬───────╮   ╭───────┬───────┬───────┬───────┬───────╮
// *                                                                       [???]
 //* ├───────┼ [ז/Z] ┼─  %  ─┼─  &  ─┼───────┤   ├───────┼─  _  ─┼─  `  ─┼ [!/?] ┼───────┤
// * 
// * ╰───────┴───────┴───────┴───────┴───────╯   ╰───────┴───────┴───────┴───────┴───────╯

// Left
COMBO(percent,      &kp PRCNT,      POS_PRCNT,    ENG HEB SYS,          50, 50)
COMBO(ampersand,    &kp AMPS,       POS_AMPS,     ENG HEB SYS,          50, 50)
// Right
COMBO(underscore,   &kp UNDER,      POS_UNDER,    ENG HEB SYS,          50, 50)
COMBO(backtick,     &kp GRAVE,      POS_GRAVE,    ENG HEB SYS,          50, 50)
COMBO(bslash,       &kp BSLH,       POS_BSLH,     ENG HEB SYS,          50, 50)


// Home-Bottom Ring Column
#if defined PINKY_2 && (defined BIRD || defined COLEMAK)
    // Left
    #ifdef BIRD
        COMBO(q,            &kp Q,          LM3 LL3,      ENG SYS,              50, 50)
    #else
        COMBO(z,            &kp Z,          LM3 LL3,      ENG SYS,              50, 50)
    #endif
    COMBO(zayin,        &kp HE_ZAYIN,   LM3 LL3,      HEB,                  50, 50)
    // Right
    COMBO(ques_excl,    &td_qe,         RM3 RL3,      ENG HEB SYS,          50, 50)
#endif

// * Bottom Row
// * ╭───────┬───────┬───────┬───────┬───────╮   ╭───────┬───────┬───────┬───────┬───────╮
// *                 ~     caret                                 \      pipe
// * ╰───────┴───────┴───────┴───────┴───────╯   ╰───────┴───────┴───────┴───────┴───────╯

// Left
COMBO(caret,        &kp CARET,      POS_CARET,    ENG HEB SYS,           50, 50)
#if defined INNER_0 || defined INNER_1
    // Left
    COMBO(qu,           &mm_qu,         LL3 LL1,      ENG,                   50, 50)
    COMBO(q,            &kp Q,          LL2 LL1,      ENG,                   50, 50)
    // Right
    COMBO(x,            &kp X,          RL2 RL1,      ENG SYS,               50, 50)
    COMBO(xe,           &mm_xe,         RL3 RL1,      ENG,                   50, 50)
#else
    // Left
    COMBO(tilde,        &kp TILDE,      POS_TILDE,    ENG HEB SYS,           50, 50)
    // Right
    COMBO(pipe,         &kp PIPE,       POS_PIPE,     ENG HEB SYS,           50, 50)
#endif
    };
};