/*
* KEY POSITIONS
*         ╭───────────────────────╮ ╭───────────────────────╮
* HIGH:   │  LH4 LH3 LH2 LH1 LH0  │ │  RH0 RH1 RH2 RH3 RH4  │
* MIDDLE: │  LM4 LM3 LM2 LM1 LM0  │ │  RM0 RM1 RM2 RM3 RM4  │
* LOW:    │      LL3 LL2 LL1      │ │      RL1 RL2 RL3      │
* THUMB:  ╰──────────╮   LT1 LT0  │ │  RT0 RT1 ╭────────────╯
*                    ╰────────────╯ ╰──────────╯ 
*/

// Combo parameters
//   timeout-ms:
//     All the keys in key-positions must be pressed within
//     this time in milliseconds to trigger the combo
//   bindings:
//     A behavior to run when the combo is triggered
//   key-positions:
//     A list of key position indices for the keys which should trigger the combo
//   layers:
//     A list of layers on which the combo may be triggered. -1 allows all layers.
//   require-prior-idle-ms:
//     If any non-modifier key is pressed within require-prior-idle-ms
//     before a key in the combo, the key will not be considered for the combo

// * Source: https://github.com/caksoylar/zmk-config
// #define COMBO(NAME, BINDINGS, KEYPOS, LAYERS, TERM, QUICKTAP, ...) \
//     combo_##NAME { \
//         timeout-ms = <TERM>; \
//         bindings = <BINDINGS>; \
//         key-positions = <KEYPOS>; \
//         layers = <LAYERS>; \
//         require-prior-idle-ms = <QUICKTAP>; \
// 		__VA_ARGS__ \
//     };

#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS, TERM) \
    combo_##NAME { \
        timeout-ms = <TERM>; \
        bindings = <BINDINGS>; \
        key-positions = <KEYPOS>; \
        layers = <LAYERS>; \
    };

/ {
    combos {
        compatible = "zmk,combos";

// SECTION - Layers
COMBO(english,      &to ENG,        LT1 RT1,      ENG SYS FUN BLE,     50)
COMBO(heb_to_eng,   &heb_x,         LT1 RT1,      HEB,                 50)
COMBO(function,     &to FUN,        LT0 RT1,      ENG HEB SYS FUN BLE, 50)
COMBO(blth_l,       &to BLE,        LH3 LH2 LH1,  ENG HEB SYS FUN,     50)
COMBO(blth_r,       &to BLE,        RH3 RH2 RH1,  ENG HEB SYS FUN,     50)
COMBO(eng_to_heb,   &to_heb,        LM0 RM0,      ENG,                 50)
COMBO(hebrew,       &to HEB,        LM0 RM0,      SYS FUN BLE,         50)

//!SECTION

// SECTION - General
COMBO(alt_tab,      &atht 0 TAB,    LH4 LM4,      ENG HEB SYS FUN,     20)
COMBO(escape,       &kp ESCAPE,     LH0 LM0,      ENG HEB SYS FUN,     70)
COMBO(capsword,     &caps_word,     LH0 RH0,      ENG HEB,             50)
COMBO(capslock,     &kp CAPS,       LL1 RL1,      ENG HEB SYS FUN,     50)
COMBO(bspc_del,     &mm_bspc_del,   RH0 RM0,      ENG HEB SYS FUN,     50)
COMBO(return,       &kp RETURN,     RH4 RM4,      ENG HEB SYS FUN,     50)
//!SECTION

// SECTION - Shortcuts
COMBO(copy_paste,   &mm_cpy_pst,    LH4 LH3,      ENG HEB SYS FUN,     50)
COMBO(undo,         &kp LC(Z),      LM4 LL3,      ENG HEB SYS FUN,     50)
COMBO(redo,         &kp LC(Y),      RM4 RL3,      ENG HEB SYS FUN,     50)
COMBO(paste,        &mm_paste,      RH4 RH3,      ENG HEB SYS FUN,     50)
//!SECTION

// SECTION - Parentheses and Brackets
// Left
COMBO(brc_l,        &kp LBRC,       LH3 LH2,      ENG SYS,             20)
COMBO(h_brc_l,      &kp HE_LBRC,    LH3 LH2,      HEB,                 20)
COMBO(brkt_l,       &kp LBKT,       LH2 LH1,      ENG SYS,             20)
COMBO(h_brkt_l,     &kp HE_LBKT,    LH2 LH1,      HEB,                 20)
COMBO(lpar_less,    &mm_lplt,       LH1 LH0,      ENG SYS,             20)
COMBO(h_lpar_less,  &mm_hlplt,      LH1 LH0,      HEB,                 20)
// Right
COMBO(rpar_great,   &mm_rpgt,       RH1 RH0,      ENG SYS,             20)
COMBO(h_rpar_great, &mm_hrpgt,      RH1 RH0,      HEB,                 20)
COMBO(brkt_r,       &kp RBKT,       RH2 RH1,      ENG SYS,             20)
COMBO(h_brkt_r,     &kp HE_RBKT,    RH2 RH1,      HEB,                 20)
COMBO(brc_r,        &kp RBRC,       RH3 RH2,      ENG SYS,             20)
COMBO(h_brc_r,      &kp HE_RBRC,    RH3 RH2,      HEB,                 20)
//!SECTION

// SECTION - Punctuation and Symbols
// Left
    // Top-Middle
COMBO(dollar,       &kp DOLLAR,     LH3 LM2,      ENG SYS,             50)
COMBO(h_nis,        &kp HE_NIS,     LH3 LM2,      HEB,                 50)
COMBO(hash,         &kp HASH,       LH2 LM2,      ENG HEB SYS,         50)
COMBO(sdqt,         &kp SQT,        LH1 LM1,      ENG SYS,             50)
COMBO(h_sdqt,       &mm_hsdq,       LH1 LM1,      HEB,                 50)
    // Middle
COMBO(at,           &kp AT,         LM3 LM1,      ENG HEB SYS,         50)
    // Middle-Bottom
COMBO(percent,      &kp PRCNT,      LM3 LL3,      ENG HEB SYS,         50)
COMBO(ampersand,    &kp AMPS,       LM2 LL2,      ENG HEB SYS,         50)
COMBO(underscore,   &kp UNDER,      LM1 LL1,      ENG HEB SYS,         50)
COMBO(backtick,     &kp GRAVE,      LM0 LL1,      ENG HEB SYS,         50)
    // Bottom
COMBO(tilde,        &kp TILDE,      LL3 LL2,      ENG HEB SYS,         50)

// Right
    // Top-Middle
COMBO(ques_excl,    &td_qe,         RH1 RM1,      ENG HEB SYS,         50)
COMBO(asterisk,     &kp ASTRK,      RH2 RM2,      ENG HEB SYS,         50)
COMBO(fslash,       &kp FSLH,       RH3 RM3,      ENG SYS,             50)
COMBO(h_fslash,     &kp HE_FSLH,    RH3 RM3,      HEB,                 50)
    // Middle
COMBO(un_equal,     &mm_eq,         LM1 LH0,      ENG HEB SYS,         50)
    // Middle-Bottom
COMBO(plus,         &kp PLUS,       RM0 RL1,      ENG HEB SYS,         50)
COMBO(hyphen,       &kp MINUS,      RM1 RL1,      ENG HEB SYS,         50)
COMBO(pipe,         &kp PIPE,       RM2 RL2,      ENG HEB SYS,         50)
COMBO(bslash,       &kp BSLH,       RM3 RL3,      ENG HEB SYS,         50)
    // Bottom
COMBO(caret,        &kp CARET,      RL3 RL2,      ENG HEB SYS,         50)

//!SECTION

// SECTION - Math Operators
//!SECTION

// SECTION - English and Hebrew Letters
// Left
#ifdef BIRD
    COMBO(q,         &kp Q,         LM3 LL3,      ENG SYS,             50)
    COMBO(ques_excl, &td_qe,        RM3 RL3,      ENG HEB SYS,         50)
#elifdef APT
    // Left
    COMBO(qu,        &mm_qu,        LL3 LL1,      ENG,                 50)
    COMBO(q,         &kp Q,         LL2 LL1,      ENG,                 50)
    // Right
    COMBO(x,         &kp X,         RL2 RL1,      ENG SYS,             50)
    COMBO(zayin,     &kp HE_ZAYIN,  RL2 RL1,      HEB,                 50)
    COMBO(xe,        &mm_xe,        RL3 RL1,      ENG,                 50)
    COMBO(ex,        &mm_ex,        RM2 RL1,      ENG,                 50)
    COMBO(ax,        &mm_ax,        RM3 RL1,      ENG,                 50)
    COMBO(ix,        &mm_ix,        RM4 RL1,      ENG,                 50)
#else
    COMBO(z,         &kp Z,         LM3 LL3,   ENG SYS,            50)
    COMBO(zayin,     &kp HE_ZAYIN,  LM3 LL3,   HEB,                50)
#endif
//!SECTION
    };
};