/*
* KEY POSITIONS
*         ╭─────────────────────────╮ ╭─────────────────────────╮
* HIGH:   │  LH4  LH3 LH2 LH1 [LH0] │ │ [RH0] RH1 RH2 RH3  RH4  │
* MIDDLE: │  LM4  LM3 LM2 LM1 [LM0] │ │ [RM0] RM1 RM2 RM3  RM4  │
* LOW:    │ [LL4] LL3 LL2 LL1 [LL0] │ │ [RL0] RL1 RL2 RL3 [RL4] │
* THUMB:  ╰───────────╮   LT1  LT0  │ │  RT0  RT1 ╭─────────────╯
*                     ╰─────────────╯ ╰───────────╯ 
*/

// Combo parameters
//   timeout-ms:
//     All the keys in key-positions must be pressed within
//     this time in milliseconds to trigger the combo
//   bindings:
//     A behavior to run when the combo is triggered
//   key-positions:
//     A list of key position indices for the keys which should trigger the combo
//   layers:
//     A list of layers on which the combo may be triggered. -1 allows all layers.
//   require-prior-idle-ms:
//     If any non-modifier key is pressed within require-prior-idle-ms
//     before a key in the combo, the key will not be considered for the combo

// * Source: https://github.com/caksoylar/zmk-config
// #define COMBO(NAME, BINDINGS, KEYPOS, LAYERS, TERM, QUICKTAP, ...) \
//     combo_##NAME { \
//         timeout-ms = <TERM>; \
//         bindings = <BINDINGS>; \
//         key-positions = <KEYPOS>; \
//         layers = <LAYERS>; \
//         require-prior-idle-ms = <QUICKTAP>; \
// 		__VA_ARGS__ \
//     };

#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS, TERM) \
    combo_##NAME { \
        timeout-ms = <TERM>; \
        bindings = <BINDINGS>; \
        key-positions = <KEYPOS>; \
        layers = <LAYERS>; \
    };

/ {
    combos {
        compatible = "zmk,combos";

// SECTION - Layers
COMBO(english,      &to ENG,        LT1 RT1,      ENG SYS FUN BLE,     50)
COMBO(heb_to_eng,   &heb_x,         LT1 RT1,      HEB,                 50)
COMBO(function,     &to FUN,        LT0 RT1,      ENG HEB SYS FUN BLE, 50)
COMBO(blth_l,       &to BLE,        LH3 LH2 LH1,  ENG HEB SYS FUN BLE, 50)
COMBO(blth_r,       &to BLE,        RH3 RH2 RH1,  ENG HEB SYS FUN BLE, 50)
COMBO(eng_to_heb,   &to_heb,        LM0 RM0,      ENG,                 50)
COMBO(hebrew,       &to HEB,        LM0 RM0,      SYS FUN BLE,         50)

//!SECTION

// SECTION - General
COMBO(capslock,     &kp CAPS,       LL1 RL1,      ENG HEB SYS FUN,     50)
COMBO(alt_tab,      &atht 0 TAB,    LH4 LM4,      ENG HEB SYS FUN,     20)
COMBO(capsword,     &caps_word,     LH0 RH0,      ENG HEB,             50)
COMBO(escape,       &kp ESCAPE,     LH0 LM0,      ENG HEB SYS FUN,     70)
COMBO(return,       &kp RETURN,     RH0 RM0,      ENG HEB SYS FUN,     50)
COMBO(bspc_del,     &mm_bspc_del,   RH4 RM4,      ENG HEB SYS FUN,     50)
//!SECTION

// SECTION - Shortcuts
COMBO(copy_paste,   &mm_cpy_pst,    LH4 LH3,      ENG HEB SYS FUN,     50)
COMBO(undo,         &kp LC(Z),      LH4 LM3,      ENG HEB SYS FUN,     50)
COMBO(redo,         &kp LC(Y),      RH4 RM3,      ENG HEB SYS FUN,     50)
//!SECTION

// SECTION - Parentheses and Brackets
// Left
COMBO(lte,          &mm_lte,        LH3 LH2,      ENG SYS,             50)
COMBO(h_lte,        &mm_hlte,       LH3 LH2,      HEB,                 50)
COMBO(brkt_brc_l,   &kp LBKT,       LH2 LH1,      ENG SYS,             50)
COMBO(h_brkt_brc_l, &kp HE_LBKT,    LH2 LH1,      HEB,                 50)
COMBO(par_l,        &kp LPAR,       LH1 LH0,      ENG SYS,             50)
COMBO(h_par_l,      &kp HE_LPAR,    LH1 LH0,      HEB,                 50)
// Right
COMBO(par_r,        &kp RPAR,       RH1 RH0,      ENG SYS,             50)
COMBO(h_par_r,      &kp HE_RPAR,    RH1 RH0,      HEB,                 50)
COMBO(brkt_brc_r,   &kp RBKT,       RH2 RH1,      ENG SYS,             50)
COMBO(h_brkt_brc_r, &kp HE_RBKT,    RH2 RH1,      HEB,                 50)
COMBO(gte,          &mm_gte,        RH3 RH2,      ENG SYS,             50)
COMBO(h_gte,        &mm_hgte,       RH3 RH2,      HEB,                 50)
//!SECTION

// SECTION - Punctuation and Symbols
COMBO(tilde,        &kp TILDE,      LL3 LL2,       ENG HEB SYS,        50)
COMBO(at,           &kp AT,         LH3 LM3,       ENG HEB SYS,        50)
COMBO(hash,         &kp HASH,       LH2 LM2,       ENG HEB SYS,        50)
COMBO(backtick,     &kp GRAVE,      RM2 RL2,       ENG HEB SYS,        50)
COMBO(dollar,       &kp DOLLAR,     LL3 LL2,       ENG SYS,            50)
COMBO(h_nis,        &kp HE_NIS,     LL3 LL2,       HEB,                50)
COMBO(ampersand,    &kp AMPS,       LM1 LL1,       ENG HEB SYS,        50)
COMBO(pipe,         &kp PIPE,       RL3 RL2,       ENG HEB SYS,        50)
COMBO(caret,        &kp CARET,      LL2 LL1,       ENG HEB SYS,        50)
COMBO(underscore,   &kp UNDER,      RM1 RL1,       ENG HEB SYS,        50)
COMBO(bslash,       &kp BSLH,       RL2 RL1,       ENG HEB SYS,        50)

//!SECTION

// SECTION - Math Operators
COMBO(asterisk,     &kp ASTRK,      RH2 RM2,      ENG HEB SYS,         50)
COMBO(fslash,       &kp FSLH,       RH3 RM3,      ENG SYS,             50)
COMBO(h_fslash,     &kp HE_FSLH,    RH3 RM3,      HEB,                 50)
COMBO(un_equal,     &mm_eq,         LM1 LH0,      ENG HEB SYS,         50)
COMBO(plus,         &kp PLUS,       RM1 RH0,      ENG HEB SYS,         50)
COMBO(hyphen,       &kp MINUS,      RH1 RM1,      ENG HEB SYS,         50)
COMBO(percent,      &kp PRCNT,      LM2 LL2,      ENG HEB SYS,         50)
//!SECTION

// SECTION - English and Hebrew Letters
// #ifdef INNER_0
//     COMBO(v,            &kp V,          LM3 LM2,   ENG,                20)
//     COMBO(zayin,        &kp HE_ZAYIN,   LM3 LM2,   HEB,                20)
//     COMBO(k,            &kp K,          LM2 LM1,   ENG,                20)
//     COMBO(ayin,         &kp HE_AYIN,    LM2 LM1,   HEB,                20)
//     COMBO(j,            &kp J,          RM2 RM1,   ENG,                20)
//     COMBO(z,            &kp Z,          RM3 RM2,   ENG,                20)
// #elifdef INNER_1
//     COMBO(k,            &kp K,          LM2 LM1,   ENG,                25)
//     COMBO(z,            &kp Z,          RM2 RM1,   ENG,                25)
//     COMBO(zayin,        &kp HE_ZAYIN,   RM2 RM1,   HEB,                50)
// #endif

// Home-Bottom Ring Column
#if defined PINKY_2 && (defined BIRD || defined COLEMAK)
    // Left
    #ifdef BIRD
        COMBO(q,         &kp Q,         LM3 LL3,   ENG SYS,            50)
    #else
        COMBO(z,         &kp Z,         LM3 LL3,   ENG SYS,            50)
    #endif
        COMBO(zayin,     &kp HE_ZAYIN,  LM3 LL3,   HEB,                50)
    // Right
        COMBO(ques_excl, &td_qe,        RM3 RL3,   ENG HEB SYS,        50)
#endif

// #if defined INNER_0 || defined INNER_1
//     // Left
//     COMBO(qu,           &mm_qu,         LL3 LL1,   ENG,                50)
//     COMBO(q,            &kp Q,          LL2 LL1,   ENG,                50)
//     // Right
//     COMBO(x,            &kp X,          RL2 RL1,   ENG SYS,            50)
//     COMBO(xe,           &mm_xe,         RL3 RL1,   ENG,                50)

//     // General Letter Combos
//     // Left
//     COMBO(ck,           &mm_ck,         LH3 LM1,   ENG,                25)
//     COMBO(sk,           &mm_sk,         LM3 LM1,   ENG,                25)
//     COMBO(rk,           &mm_rk,         LM4 LM1,   ENG,                25)
//     // Right
//     COMBO(ex,           &mm_ex,         RM2 RL1,   ENG,                50)
//     COMBO(ax,           &mm_ax,         RM3 RL1,   ENG,                50)
//     COMBO(ix,           &mm_ix,         RM4 RL1,   ENG,                50)
// #endif
//!SECTION
    };
};