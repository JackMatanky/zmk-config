/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>


// Keymaps

#include "../../../../lang/hebrew.h"
#include "../../../../user_def_keys/shortcut.h"
#include "../../../../user_def_keys/mod.h"
#include "mouse.dtsi"

&mt {
    tapping_term_ms = <200>;
    flavor = "tap-preferred";
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

// Behaviors Constants

#define long_tap 200
#define short_tap 150

// Combos Constants

#define default_timeout 50

// Layers

#define ENG    0
#define HEB    1
#define SYM    2
#define KBNV   3
#define MSNV   4
#define BLTH   5

/ {
    combos {
        compatible = "zmk,combos";

        /*                KEY POSITIONS
* ╭─────────────────────╮ ╭─────────────────────╮
* │ LT4 LT3 LT2 LT1 LT0 │ │ RT0 RT1 RT2 RT3 RT4 │
* │ LM4 LM3 LM2 LM1 LM0 │ │ RM0 RM1 RM2 RM3 RM4 │
* │ LB4 LB3 LB2 LB1 LB0 │ │ RB0 RB1 RB2 RB3 RB4 │
* ╰───────────╮ LH1 LH0 │ │ RH0 RH1 ╭───────────╯
*             ╰─────────╯ ╰─────────╯ 
*           34 Key Matrix
* ╭──────────────╮ ╭──────────────╮
* │ 0  1  2  3  4│ │ 5  6  7  8  9│
* │10 11 12 13 14│ │15 16 17 18 19│
* │20 21 22 23 24│ │25 26 27 28 29│
* ╰────────╮30 31│ │32 33╭────────╯
*          ╰─────╯ ╰─────╯         
*/
        // General combos

        combo_to_base {
            bindings = <&to ENG>;
            key-positions = <30 33>;
            timeout-ms = <default_timeout>;
        };

        combo_to_bt {
            bindings = <&to BLTH>;
            key-positions = <0 9>;
            timeout-ms = <default_timeout>;
            layers = <0 1 2 3 4>;
        };

        // Alphanumeric-Layer combos

        combo_caps_word {
            bindings = <&caps_word>;
            key-positions = <14 15>;
            timeout-ms = <default_timeout>;
            layers = <0 1 2>;
        };

        // Top Row (left to right)

        combo_escape {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            timeout-ms = <default_timeout>;
            layers = <0 1 2>;
        };

        combo_backtick {
            bindings = <&kp GRAVE>;
            timeout-ms = <default_timeout>;
            key-positions = <1 2>;
            layers = <0 1 2>;
        };

        combo_at_sign {
            bindings = <&kp AT_SIGN>;
            timeout-ms = <default_timeout>;
            key-positions = <2 3>;
            layers = <0 1 2>;
        };

        combo_hyphen {
            bindings = <&kp KP_MINUS>;
            timeout-ms = <default_timeout>;
            key-positions = <6 7>;
            layers = <0 1 2>;
        };

        combo_underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <7 8>;
            timeout-ms = <default_timeout>;
            layers = <0 1 2>;
        };

        combo_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
            timeout-ms = <default_timeout>;
            layers = <0 1 2>;
        };

        // Middle row

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
            timeout-ms = <default_timeout>;
            layers = <0 1 2>;
        };

        combo_return {
            bindings = <&kp RETURN>;
            key-positions = <18 19>;
            timeout-ms = <default_timeout>;
            layers = <0 1 2>;
        };

        // Bottom row

        combo_hash {
            bindings = <&kp HASH>;
            key-positions = <20 21>;
            timeout-ms = <default_timeout>;
            layers = <0 1 2>;
        };

        combo_dollar {
            timeout-ms = <default_timeout>;
            key-positions = <22 23>;
            bindings = <&kp DOLLAR>;
            layers = <0 2>;
        };

        combo_shekel {
            bindings = <&kp H_SHKL>;
            key-positions = <22 23>;
            timeout-ms = <default_timeout>;
            layers = <1>;
        };

        combo_asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <26 27>;
            timeout-ms = <default_timeout>;
            layers = <0 1 2>;
        };

        combo_slash {
            bindings = <&kp FSLH>;
            key-positions = <28 29>;
            timeout-ms = <default_timeout>;
            layers = <0 1 2>;
        };

        combo_caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <24 25>;
            timeout-ms = <default_timeout>;
            layers = <0 1 2>;
        };
    };

    behaviors {
        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;
        };

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>;
        };

        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        skht: sticky_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&sk>, <&kp>;
        };

        // MOD MORPH LAYER
        // To ENGLISH; Shifted: To Hebrew

        mm_base: morph_base_eng_heb {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&to 0>, <&to 1>;
        };

        // To KEYBOARD; Shifted: To MOUSE

        mm_nav: morph_nav_kb_ms {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&to 3>, <&to 4>;
        };

        // To SYMBOL; Shifted: To KEYBOARD

        mm_sym_kb: morph_sym_nav_kb {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&to 2>, <&to 3>;
        };

        // To SYMBOL; Shifted: To MOUSE

        mm_sym_ms: morph_sym_nav_ms {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&to 2>, <&to 4>;
        };

        // PUNCTUATION TAP DANCE
        // 1: Period "."; 2: Colon ":"; 3: Ellipsis "..."

        td_dc: tap_dot_colon {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp DOT>, <&kp COLON>, <&ellipsis>;
        };

        // 1: Comma ","; 2: Semicolon ";"

        td_cs: tap_comma_semicolon {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
        };

        // 1: Single quote "'"; 2: Double quote """; 3: Triple-double quote """""

        td_sdq: tap_single_double_quote {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>, <&tri_dquote>;
        };

        // 1: Question mark "?"; 2: Exclamation mark "!"; 3: Triple question marks "???"

        td_qe: tap_ques_excl {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings =
                <&kp QUESTION>,
                <&kp EXCLAMATION>,
                <&kp QUESTION &kp QUESTION &kp QUESTION>;
        };

        // 1: Period "."; 2: Colon ":"; 3: Ellipsis "..."

        td_hdc: tap_heb_dot_colon {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp H_DOT>, <&kp H_COLON>, <&heb_ellipsis>;
        };

        // 1: Comma ","; 2: Semicolon ";"

        td_hcs: tap_heb_comma_semicolon {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp H_COMMA>, <&kp H_SEMI>;
        };

        // 1: Single quote "'"; 2: Double quote """; 3: Triple-double quote """""

        td_hsdq: tap_heb_single_double_quote {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp H_SQT>, <&kp H_DQT>, <&heb_tri_dquote>;
        };

        // 1: Question mark "?"; 2: Exclamation mark "!"

        td_hqe: tap_heb_ques_excl {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp H_QMARK>, <&kp H_EXCL>;
        };

        // 1: Tsadi; 2: End tsadi

        td_htsdi: tap_heb_tsadi {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp H_TSDI>, <&kp H_FTSDI>;
        };

        // MOD MORPH NUMBER-FUNCTION

        mm_fn1: morph_num_func_1 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp KP_N1>, <&kp F1>;
        };

        mm_fn2: morph_num_func_2 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp KP_N2>, <&kp F2>;
        };

        mm_fn3: morph_num_func_3 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp KP_N3>, <&kp F3>;
        };

        mm_fn4: morph_num_func_4 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp KP_N4>, <&kp F4>;
        };

        mm_fn5: morph_num_func_5 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp KP_N5>, <&kp F5>;
        };

        mm_fn6: morph_num_func_6 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp KP_N6>, <&kp F6>;
        };

        mm_fn7: morph_num_func_7 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp KP_N7>, <&kp F7>;
        };

        mm_fn8: morph_num_func_8 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp KP_N8>, <&kp F8>;
        };

        mm_fn9: morph_num_func_9 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp KP_N9>, <&kp F9>;
        };

        mm_fn0: morph_num_func_10 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp KP_N0>, <&kp F10>;
        };

        // MOD MORPH INTERNET SHORTCUTS

        mm_tab_next_prev: morph_internet_tab_next_prev {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp RC(TAB)>, <&kp RC(RS(TAB))>;
        };

        mm_tab_open_close: morph_internet_tab_open_close {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RCTL)>;
            bindings = <&kp RC(T)>, <&kp LC(W)>;
        };

        mm_tab_refresh_reopen: morph_internet_tab_refresh_reop {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RCTL)>;
            bindings = <&kp RC(R)>, <&kp LS(LC(T))>;
        };

        mm_pg_next_prev: morph_internet_page_next_prev {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            bindings = <&kp LA(RIGHT_ARROW)>, <&kp LA(LEFT_ARROW)>;
        };
    };

    macros {
        ellipsis: ellipsis {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp DOT &kp DOT>;
        };

        heb_ellipsis: heb_ellipsis {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp H_DOT &kp H_DOT &kp H_DOT>;
        };

        tri_dquote: triple_double_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp DQT &kp DQT>;
        };

        heb_tri_dquote: heb_triple_double_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp H_DQT &kp H_DQT &kp H_DQT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        ENG {
            display-name = "English";
            bindings = <
&kp Q  &kp W  &kp F        &kp P            &kp B            &kp J      &kp L        &kp U        &kp Y   &td_sdq
&kp A  &kp R  &hml LALT S  &hml LGUI T      &kp G            &kp M      &hmr RGUI N  &hmr RALT E  &kp I   &kp O
&kp Z  &kp X  &kp C        &kp D            &kp V            &kp K      &kp H        &td_cs       &td_dc  &td_qe
                           &skht MEH SPACE  &sk LSHFT        &sk RCTRL  &mm_sym_kb
            >;
        };

        HEB {
            display-name = "Hebrew";
            bindings = <
&kp H_QOF   &kp H_RESH  &kp H_ALEF        &kp H_TET        &kp H_VAV         &kp H_FNUN  &kp H_FMEM       &kp H_PE          &td_htsdi   &td_hsdq
&kp H_SHIN  &kp H_DALT  &hml LALT H_GIML  &hml LGUI H_KAF  &kp H_AYIN        &kp H_YOD   &hmr RGUI H_HET  &hmr RALT H_LAMD  &kp H_FKAF  &kp H_FPE
&kp H_ZAYN  &kp H_SMKH  &kp H_BET         &kp H_HE         &kp H_NUN         &kp H_MEM   &kp H_TAV        &td_hcs           &td_hdc     &td_hqe
                                          &skht MEH SPACE  &sk LSHFT         &sk RCTRL   &mm_sym_kb
            >;
        };

        SYM {
            display-name = "Symbols";
            bindings = <
&mm_fn1           &mm_fn2            &mm_fn3                         &mm_fn4                      &mm_fn5              &mm_fn6    &mm_fn7            &mm_fn8             &mm_fn9    &mm_fn0
&kp LEFT_BRACKET  &kp RIGHT_BRACKET  &hml LEFT_ALT LEFT_PARENTHESIS  &hml LGUI RIGHT_PARENTHESIS  &kp BACKSLASH        &none      &hmr RGUI KP_PLUS  &hmr RALT KP_EQUAL  &kp CARET  &kp AMPERSAND
&kp LEFT_BRACE    &kp RIGHT_BRACE    &kp LESS_THAN                   &kp GREATER_THAN             &kp PIPE             &none      &kp PERCENT        &kp TILDE           &none      &mm_base
                                                                     &skht MEH SPACE              &sk LSHIFT           &sk RCTRL  &mm_nav
            >;
        };

        KBNV {
            display-name = "Keyboard_Nav";
            bindings = <
&kp ESC           &kp LC(Y)  &kp LC(Z)  &kp CSCRN       &kp PSCRN         &mm_tab_refresh_reopen  &mm_tab_next_prev  &mm_pg_next_prev  &mm_tab_open_close  &kp BSPC
&mt SWCH_APP TAB  &kp LC(V)  &kp LC(C)  &mkp LCLK       &mkp RCLK         &kp LEFT                &kp DOWN           &kp UP            &kp RIGHT           &kp RET
&kp LALT          &none      &none      &none           &none             &kp HOME                &kp PG_DN          &kp PG_UP         &kp END             &mm_base
                                        &skht MEH LGUI  &sk LSHIFT        &sk RCTRL               &mm_sym_ms
            >;
        };

        MSNV {
            display-name = "Mouse_Nav";
            bindings = <
&trans  &trans  &trans  &trans  &trans        &trans            &trans            &trans          &trans             &trans
&trans  &trans  &trans  &trans  &trans        &mmv MOVE_LEFT    &mmv MOVE_DOWN    &mmv MOVE_UP    &mmv MOVE_RIGHT    &trans
&trans  &trans  &trans  &trans  &trans        &msc SCROLL_LEFT  &msc SCROLL_DOWN  &msc SCROLL_UP  &msc SCROLL_RIGHT  &trans
                        &trans  &trans        &trans            &mm_sym_kb
            >;
        };

        BLTH {
            display-name = "Bluetooth";
            bindings = <
&bt BT_CLR   &none  &none       &none       &none             &none         &none         &none         &none         &none
&none        &none  &bt BT_PRV  &bt BT_NXT  &none             &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0
&bootloader  &none  &none       &none       &none             &none         &none         &none         &none         &none
                                &mm_nav     &sk LSHIFT        &mm_base      &to 2
            >;
        };
    };
};
